"Maybe what we want(ed) here then is explicit versioning, to have the 3definitions available. Then the application is able to use, say structsctp_event_subscribe, and be happy with it, while there is structsctp_event_subscribe_v2 and struct sctp_event_subscribe_v3 there too.But it's too late for that now because that would break applicationsalready using the new fields in sctp_event_subscribe.Not disagreeing. I really just don't know how supported that is.Willing to know so I can pay more attention to this on future changes.Btw, is this the only occurrence?Seems interesting. Why would it need that upper limit to optlen?Say struct v1 had 4 bytes, v3 now had 12. The user supplies 12 bytesto the kernel that only knows about 4 bytes. It can check that (12-4)bytes in the end, make sure no bit is on and use only the first 4.The fact that it was 12 or 200 shouldn't matter, should it? As long asthe (200-4) bytes are 0'ed, only the first 4 will be used and itshould be ok, otherwise EINVAL. No need to know how big the currentcurrent actually is because it wouldn't be validating that here: justthat it can safely use the first 4 bytes.",Technical
,
"What given sources say that?  I understand it might be expected, but this is ancommon concern with setsockopt method on many protocols, it just so happens thatsctp extends them more than other protocols.Right, put another way, we support backward compatibility with older userspaceapplications, but not newer one.  I.e. if you build an application against the4.9 SCTP API, it should work with the 4.19 UAPI, but not vice versa, which itseems is like what you are trying to do here.There is no real uppper limit to the size of the structure in this case, andIIRC this isn't the only sockopt structure that can be exentded for SCTP in thisway.I really don't see a sane way to allow newer userspaces to be compatible witholder kernels here.  If we were to do it I would suggest moving theresponsibility for that feature into lksctp-tools, versioning that library suchthat correlary symbols are versioned to translate the application view of thesocket options structs to the size and format that the running kernelundertands.  Note that I'm not really advocating for that, as it seems like afast moving target, but if we were to do it I think that would be the most saneway to handle it.Neil",Technical
,
"Was looking for that. Thanks.Speaking of that, recent lksctp-tools got some defines to help knowingwhich features the available kernel headers have as it now probes ifspecific struct members are available or not. Though yeah, it alsowouldn't help in this case, just mentioning it.",Technical
,
"Yeah, I'm not supportive of codifying that knoweldge in the kernel.  If we wereto support bi-directional versioning, I would encode it into lksctp-tools ratherthan the kernel.No, I think there are a few others (maybe paddrparams?)I think the thought was to differentiate between someone passing a legit largerstructure from a newer UAPI, from someone just passing in a massiveinappropriately sized buffer (even if the return on both is the same).I'm less than excited about making the kernel check an unbounded user spacebuffer, thats seems like a potential DOS attack from an unpriviledged user tome.  I'm also still hung up on the notion that, despite how we do this, thispatch is going into the latest kernel, so it will only work on a kernel thatalready understands the most recent set of subscriptions.  It would work if we,again someday in the future extended this struct, someone built against thatnewer UAPI, and then tried to run it on a kernel that had this patch.FWIW, there is an existing implied method to determine the availablesubscription events. sctp_getsockopt_events does clamp the size of the outputbuffer, and returns that information in the optlen field via put_user.  Anapplication that was build against UAPIs from 4.19 could pass in the 4.19sctp_event_subscribe struct to sctp_getsockopt_events, and read the outputlength, whcih would inform the application of the events that the kernel iscapable of reporting, and limit itself to only using those events.  Its not aperfect solution, but its direct, understandable and portable.Neil",Technical
,
"Right.Can't really say, this is one I witnessed, I haven't really looked forothers.The upper limit concern is more regarding the call to copy_from_userwith an unrestricted/unchecked value.I am not sure of how much of a risk/how exploitable this could be,that's why I cautiously wanted to limit it in the first place just in case.--Julien Gomes",Technical
,
"Copy_from_user should be safe to copy an arbitrary amount, the only restrictionis that optlen can't exceed the size of the buffer receiving the data in thekernel.  From that standpoint your patch is safe.  However,  that exposes theproblem of checking any tail data on the userspace buffer.  That is to say, ifyou want to ensure that any extra data that gets sent from userspace isn't'set', you would have to copy that extra data in consumable chunks and checkthem individaully, and that screams DOS to me (i.e. imagine a user passing in a4GB buffer, and having to wait for the kernel to copy each X sized chunk,looking for non-zero values).",Technical
,
"And I was just reminded about huge pages.But still, my point of finding a compromise still stands.",Technical
,
"Probably not, but I'm not going to pick a magic number to gate whats ok andwhats not for sockopt validation.We really don't have to, I refer you to my previous not referencing the factthat the getsockopt variant of this call will return the expected length of thisoption for the running kernel, allowing userspace to know explicitly what thebuffer size should be, and by extension, what options are supportedNeil",Technical
,
"From: Marcelo Ricardo LeitnerIt is probably better to break the recompilation of the few programsthat use the new fields (and have them not work on old kernels)than to stop recompilations of old programs stop working on oldkernels or have requested new options silently ignored.There are all sorts of reasons why programs get built on systems thatare newer than the ones they need to run on.I'm currently planning to get around the glibc 'memcpy()' fubar so Ican retire some very old build systems before their disks die.Fortunately our sctp code is in the kernel - so has to be compiledwith the correct headers.Agreed, these structures should never be changed.	David-Registered Address Lakeside, Bramley Road, Mount Farm, Milton Keynes, MK1 1PT, UKRegistration No: 1397386 (Wales)",Technical
,
"I got confused here, not sure what you mean. Seems there is one ""stop""word too many.You can virtualize those. That's not really a good reason forbuilding with newer kernel and running on old systems, as virtuallyany old system can be virtualized.  Marcelo",Technical
,
"From: 'Marcelo Ricardo Leitner'...More confusing than I intended...With the current kernel and headers a 'new program' (one thatneeds the new options) will fail to run on an old kernel - which is good.However a recompilation of an 'old program' (that doesn't usethe new options) will also fail to run on an old kernel - which is bad.Changing the kernel to ignore extra events flags breaks the 'new'program.Versioning the structure now (even though it should have been doneearlier) won't change the behaviour of existing binaries.However a recompilation of an 'old' program would use the 'old'structure and work on old kernels.Attempts to recompile a 'new' program will fail - until the structurename (or some #define to enable the extra fields) is changed.Breaking compilations is much better than unexpected run-timebehaviour.	David-Registered Address Lakeside, Bramley Road, Mount Farm, Milton Keynes, MK1 1PT, UKRegistration No: 1397386 (Wales)",Technical
,
"What about reusing the same socket option, but defining a new struct?Say, MYSOCKOPT supports struct mysockopt, struct mysockopt2, structmysockopt3...That way we have a clear definition of the user's intent.I'm afraid clearing out may not be enough, though seems it's the bestwe can do so far. If the struct is allocated but not fully initializedvia a memset, but by setting its fields one by one, the remaining newfields will be left uninitinialized.One use case here is: a given distro is using kernel X and app Foo isbuilt against it. Then upgrades to X+1, Foo is patched to fix an issueand is rebuilt against X+1. The user upgrades Foo package but forwhatever reason, doesn't upgrade kernel or reboot the system. Here,Foo doesn't work anymore until the new kernel is also running.",Technical
,
"Need to clarify the ""clearing out"", I think it was meant differently.It was more about on how to ensure that the 16-bytes long of the v3supplied to a v1-only kernel is compatible with the 12-bytes long v1.The kernel would have to check the trailing 4 bytes after v1-size andmake sure they are all zeroed in order for the old kernel to accept itas a v1. But, as I said above, there are situations that this will notbe enough.We have issues on read path too. 52ccb8e90c0a (""[SCTP]: UpdateSCTP_PEER_ADDR_PARAMS socket option to the latest api draft."")extended struct sctp_paddrparams and its getsockopt goes with:sctp_getsockopt_peer_addr_params()...        if (len < sizeof(struct sctp_paddrparams))                return -EINVAL;        len = sizeof(struct sctp_paddrparams);By then, we didn't have the /uapi/ folder yet. There may other cases.",Technical
,
"Thats possible, but I think thats pretty equivalaent to what daves saying, inthat he wants us to identify all the sizes of this struct and the git historyand act on them accordingly.  Having internal versions of the struct seems likea fine way to get there, but I think we need to consider how we got to thissituations before we go down the implementation path.I'm not sure this even makes sense.  Currently (as I understood it), the issuewe are facing is the one in which an application is built against a newer kerneland run on an older one, the implication there being that the application willpass in a buffer that is larger than what the kernel expects.  In thatsituation, clearing isn't needed, all thats needed (I think), is a memcmp of thespace between the sizeof(kernel struct version), and sizeof(userspace structversion) to see if any bits are non-zero.  If they are, we error out, otherwise,we ignore the space and move forward as though that overage doesn't exist.Mind you, I'm not (yet) advocating for that approach, just trying to clarifywhats needed.Yes, thats the use case that we're trying to address.FWIW, before we decide on a course of action, I think I need to point out that,over the last 10 years, we've extended this structure 6 times, in the followingcommits:0f3fffd8ab1db7e8616d8e7731e1cdd553d482c35ea82d611da5c95129d127c6db444153fb5a64The first two I believe were modifications during a period when sctp wasactually getting integrated to the kernel, but the last 4 were definately doneduring more recent development periods and wen't in without any commentary aboutthe impact to UAPI compatibility.  The check for optlen > sizeof(structsctp_event_subscribe) was made back in 2008, and while not spelled out, seemspretty clearly directed at enforcing compatibility with older appliations, notcompatibility with newer applications running on older kernels.I really worry about situations in which we need to support applicationsexpecting features that the running kernel doesn't have.  In this particularsituation it seems like a fixable thing, but I could envision situations inwhich we just can't do it, and I don't want to set that expectation when wecan't consistently meet it.So, if the consensus is that we need to support applications built on newerkernels, but run on older kernels (and I'd like to get verbal consensus onthat), then we need to identify a method to fix this.  I'm still hesitant todo anything that involves us accepting any size buffer over the kernel expectedsize, as that puts us in a position to have to read large amounts of user data(i.e. possible DOS), and just picking an arbitrary large number to limit thebuffer size seems wrong.  What if, on receipt of a structure from a newer kernel(implying a size larger than what the kernel expects), we clamp optlen to thekernel size, and put_user it back to the application?  i.e. we don't check anydata above and beyond what the the kernel knows about, but we use the optlen asan indicator to user space that not all the data was processed?  That allows thekernel to ignore the overage safely, and while its not in the socket apiextension RFC, its not violating anything, and is something we can document inthe sctp(7) man page as a linux only behavior.Thoughts?Neil",Technical
,
"I was more referring to future stuff, but yes. I find it a bit easierto handle than having to switch the sockopt too and so far I couldn'tfind drawbacks to it.That is, when using a new sockopt, we could accept a buffer largerthan the needed, but I'm not considering that as a valid pointanymore. Putting this compatibility aside for a moment, that prettymuch means the user doesn't know what it wants and so we also don't.That's exactly what I tried to mean. :-)Ok.Yes from my side.We can't do that on setsockopt calls, as optlen is R/O there.Returning > 0 is not specified on setsockopt(2).I also need to dig deeper on this, but in general what if we drawa line based on the current implementation:- Current struct is X bytes long- Patch current and older kernels to accept up to X bytes, as long as  the trailing bytes are zeroed. Otherwise, EINVAL.  X may be a magic number for old kernel, but this way we avoid  unbounded buffers and the limit is not random.- On further changes, create a new, explicitly versioned struct.  Older kernels will EINVAL if this new struct is used, which is  expected.  Newer kernels will then have to cope with the different  sizes/structs accordingly.  Marcelo",Technical
,
"From: Marcelo Ricardo Leitner...The API shouldn't change like this at all.Is this from the RFC or elsewhere??If the structure changes the socket option name and valueshould also change.IMHO large chunks of the sctp rfc are just horrid.In particular all the places where is states that API functions areimplemented using setsockopt() - that should be an implementation detail.Also ISTR that some of the structures are defined to have holes in them...	David-Registered Address Lakeside, Bramley Road, Mount Farm, Milton Keynes, MK1 1PT, UKRegistration No: 1397386 (Wales)",Technical
,
"I would think so. That commit is from 2005, pretty close to initialSCTP RFCs.That's what is at the core of this thread.  Marcelo",Technical
,
"Hello!    field's.[...]MBR, Sergei",Technical
,
"On Thu, Feb 7, 2019 at 8:44 AM Sergei Shtylyov<sergei.shtylyov@cogentembedded.com> wrote:Oops, missed that. Will fix in v2.Thanks,Andrey Smirnov",Technical
,
"Cc-ing Steven  https://lore.kernel.org/lkml/20190207124635.3885-1-mpe@ellerman.id.au/T/#uYou probably can have a __init buffer somewhere in ppc code, appenddata to it, step by step, and call dump_stack_set_arch_desc() allthe time.But no real objections; dump_stack_add_arch_desc() can do.FWIW,Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>	-ss",Technical
,
This shows me that this can be called at a time when more than one CPU isactive. What happens if we have two CPUs calling dump_stack_add_arch_desc() atthe same time? Can't that corrupt the dump_stack_arch_desc_str?-- Steve,Technical
,
"[..]Can overwrite part of it, I guess (but it seems that Michaelis OK with this). The string is still NULL terminated.The worst case scenario I can think of is not the one whentwo CPUs call dump_stack_add_arch_desc(), but when CPUA callsdump_stack_add_arch_desc() to append some data and at thesame time CPUB calls dump_stack_set_arch_desc() and simplyoverwrites dump_stack_arch_desc_str. Not sure if this iscritical (or possible).	-ss",Technical
,
"Hi Michael,The comment doesn't say _why_ we need to order these stores: IOW, whatwill or can go wrong without this order?  This isn't clear to me.Another good practice when adding smp_*-constructs (as discussed, e.g.,at KS'18) is to indicate the matching construct/synch. mechanism.  Andrea",Technical
,
"Yes, one barrier without a counter-part is suspicious.If the parallel access is really needed then we could define thecurrent length as atomic_t and use:	+ atomic_cmpxchg() to reserve the space for the string	+ %*s to limit the printed lengthIn the worst case, we would print an incomplete string.See below for a sample code.BTW: There are very few users of dump_stack_set_arch_desc().I would use dump_stack_add_arch_desc() everywhere to keepit simple and have a reasonable semantic.This is what I mean (only compile tested):diff --git a/lib/dump_stack.c b/lib/dump_stack.cindex 5cff72f18c4a..311dd20cc6a7 100644--- a/lib/dump_stack.c+++ b/lib/dump_stack.c@@ -14,9 +14,10 @@ #include <linux/utsname.h> static char dump_stack_arch_desc_str[128];+static atomic_t arch_desc_str_len; /**- * dump_stack_set_arch_desc - set arch-specific str to show with task dumps+ * dump_stack_set_arch_desc - add arch-specific str to show with task dumps  * @fmt: printf-style format string  * @...: arguments for the format string  *@@ -25,13 +26,32 @@ static char dump_stack_arch_desc_str[128];  * arch wants to make use of such an ID string, it should initialize this  * as soon as possible during boot.  */-void __init dump_stack_set_arch_desc(const char *fmt, ...)+void __init dump_stack_add_arch_desc(const char *fmt, ...) {-	va_list args;+	va_list args, args2;+	int len, cur_len, old_len; 	va_start(args, fmt);-	vsnprintf(dump_stack_arch_desc_str, sizeof(dump_stack_arch_desc_str),++	va_copy(args2, args);+	len = vsnprintf(NULL, sizeof(dump_stack_arch_desc_str),+			fmt, args2);+	va_end(args2);++try_again:+	cur_len = atomic_read(&arch_desc_str_len);+	if (cur_len + len > sizeof(dump_stack_arch_desc_str))+		goto out;++	old_len = atomic_cmpxchg(&arch_desc_str_len,+				 cur_len, cur_len + len);+	if (old_len != cur_len)+		goto try_again;++	vsnprintf(dump_stack_arch_desc_str + old_len,+		  sizeof(dump_stack_arch_desc_str) - old_len, 		  fmt, args);+out: 	va_end(args); }@@ -44,6 +64,8 @@ void __init dump_stack_set_arch_desc(const char *fmt, ...)  */ void dump_stack_print_info(const char *log_lvl) {+	int len;+ 	printk(""%sCPU: %d PID: %d Comm: %.20s %s%s %s %.*s\n"", 	       log_lvl, raw_smp_processor_id(), current->pid, current->comm, 	       kexec_crash_loaded() ? ""Kdump: loaded "" : """",@@ -52,9 +74,11 @@ void dump_stack_print_info(const char *log_lvl) 	       (int)strcspn(init_utsname()->version, "" ""), 	       init_utsname()->version);-	if (dump_stack_arch_desc_str[0] != '\0')-		printk(""%sHardware name: %s\n"",-		       log_lvl, dump_stack_arch_desc_str);+	len = atomic_read(&arch_desc_str_len);+	if (len) {+		printk(""%sHardware name: %*s\n"",+		       log_lvl, len, dump_stack_arch_desc_str);+	} 	print_worker_info(log_lvl, current); }Best Regards,Petr",Technical
,
"As is this silence...,Michael, what happened to this patch? did you submit a new version?Seems worth exploring, IMO; but I'd like to first hear _clear aboutthe _intended semantics (before digging into alternatives)...+rostedt,  who first raised the question about ""parallel accesses""  http://lkml.kernel.org/r/20190208185515.r6vkrezbd3odhpxt@home.goodmis.org  Andrea",Technical
,
"Andrea Parri <andrea.parri@amarulasolutions.com> writes:No, I'm just busy, it's the merge window next week :)I thought the comment was pretty clear, if the stores are observed outof order we might print the uninitialised tail.And the barrier on the read side would need to be in printk somewhere,which is obviously unpleasant.It is not my intention to support concurrent updates of the string. Theidea is you setup the string early in boot.The concern with a concurrent reader is simply that the string is dumpedin the panic path, and you never really know when you're going to panic.Even if you only write to the string before doing SMP bringup you mightstill have another CPU go rogue and panic before then.But I probably should have just not added the barrier, it's overparanoid and will almost certainly never matter in practice.cheers",Technical
,
"Got it.Indeed.Understood, thanks for the clarification.Oh, well, I can only echo you: if you don't care about the stores being_observed_ out of order, you could simply remove the barrier; if you docare, then you need ""more paranoid"" on the readers side.  ;-)  Andrea",Technical
,
"Hmm, the barrier might be fine and actually useful. Thepurpose is to make sure that the later '\0' is written beforethe existing one is replaced by ' '.The reader does not need the barrier as long as it reads the stringsequentially. I would expect that it is always the case. But whoknows with all the speculation-related CPU bugs around.In each case, any race could never crash the kernel.The dump_stack_arch_desc_str is zeroed out of box andthe very last '\0' is never rewritten.Best Regards,Petr",Technical
,
"Please don't make this a kconfig option.According to you description this is a HW feature, so please add the maxnumber of messe objects to ""struct c_can_driver_data"" and adjust thedrvdata accordingly.You probably have to pass it via ""struct c_can_priv"" so that it'savailable in the c_can.cMarc--Pengutronix e.K.                  | Marc Kleine-Budde           |Industrial Linux Solutions        | Phone: +49-231-2826-924     |Vertretung West/Dortmund          | Fax:   +49-5121-206917-5555 |Amtsgericht Hildesheim, HRA 2686  | http://www.pengutronix.de   |",Technical
,
"This still lacks a prototype.Thanks,	tglx",Technical
,
"Aside of that this doesn't apply to tip or Linus tree....Thanks,	tglx",Technical
,
"Sigh. This is absolutely the wrong place. The weak function is declared andused in fs/proc/... So the prototype wants to be in a header which isincluded from there independent of x86...Thanks,	tglx",Technical
,
"Can the prototype be in the architecture header if they want to call the function?Like the following? arch_report_meminfo() is used in fs/proc/... as well.$ find . -name *.h | xargs grep arch_report_meminfo./arch/s390/include/asm/pgtable.h:void arch_report_meminfo(struct seq_file *m);./arch/x86/include/asm/pgtable_types.h:extern void arch_report_meminfo(struct seq_file *m);./arch/parisc/include/asm/pgtable.h:extern void arch_report_meminfo(struct seq_file *m);Thanks,-Aubrey",Technical
,
"Actually both way exist in the current kernel,the reason I chose to put the prototypeinto architecture header file is that I found some architectures rename the functionname by a micro definition while others use prototype. See below:$ find . -name *.h | xargs grep arch_irq_stat./arch/arm64/include/asm/hardirq.h:#define arch_irq_stat_cpu	smp_irq_stat_cpu./arch/arm/include/asm/hardirq.h:#define arch_irq_stat_cpu	smp_irq_stat_cpu./arch/x86/include/asm/hardirq.h:extern u64 arch_irq_stat_cpu(unsigned int cpu);This looks more flexible than it in the common header file.Anyway, putting the prototype into the common header file like include/linux/proc_fs.his also acceptable to me if you persist, please just let me know, :)Thanks,-Aubrey",Technical
,
"Basic C programming course: The prototype must be available before the declaration of the global function.fs/proc/array.c:404:13: warning: no previous prototype for ‘arch_proc_pid_status’ [-Wmissing-prototypes] void __weak arch_proc_pid_status(struct seq_file *m, struct task_struct *task)Oh well....Thanks,	tglx",Technical
,
"Is this because patch 1/3 applied alone? If the whole patch set are applied,the prototype is included in <asm/processor.h>, which is at the beginning ofarray.c file, so it is available before the declaration.Thanks,-Aubrey",Technical
,
"Okay, will cook a new version to put it into the common header.Thanks,-Aubrey",Technical
,
"1) Each patch has to be correct stand alone2) This file is compiled for every architecture the kernel supports and how   many of them are including arch/x86/include/asm/processor.h ?   There is a world outside x86 and it's rather large.Thanks,	tglx",Technical
,
"Got it, thanks!",Technical
,
"I'm not exactly sure how Linux switch driver works, but from DTperspective I think we should rather have *hardware* described insteadof a common Linux case.If I'm right, we should rather have all 3 switch ports described (5, 7,8) and have Linux just use the one it needs.",Technical
,
"Yes, let's do that.--Florian",Technical
,
"On Wed, 13 Feb 2019 12:17:51 -0600Tom Zanussi <zanussi@kernel.org> wrote:Which I'm making it a priority to go and review and apply (if there'sno issues) right now ;-)-- Steve",Technical
,
"Hi Tom,Thank you for your great work!On Wed, 13 Feb 2019 12:17:51 -0600Tom Zanussi <zanussi@kernel.org> wrote:I like this very much! One point I would like to comment is to add a kind ofentry number tag, so that user distinguish the error message, e.g.  # cat /sys/kernel/debug/tracing/error_log  [1] hist:sched:sched_wakeup: error: Variable already defined    Command: keys=pid:ts0=common_timestamp.usecs if comm==""cyclictest""                    ^  [2] hist:sched:sched_waking: error: Couldn't find onmax or onchange variable    Command: key=comm:p=prio:onchange($q).snapshot()                                       ^  [3] hist:sched:sched_wakeup: error: Hist trigger already exists    Command: keys=pid             ^  ...What would you think?Thank you,--Masami Hiramatsu <mhiramat@kernel.org>",Technical
,
"Hi Tom,On Wed, 13 Feb 2019 12:17:55 -0600Tom Zanussi <zanussi@kernel.org> wrote:OK, can I take this over? I would like to try to use this framework.Yes, that is much better, especially for ftracetest.Thank you,--Masami Hiramatsu <mhiramat@kernel.org>",Technical
,
"Hi Masami,Thanks![snip]I think that makes sense and would be simple to add - will do in thenext version.Thanks,Tom",Technical
,
"Hi Masami,Sure, be my guest. ;-)Thanks,Tom",Technical
,
Drop this.What's the range of valid values?What's the range of valid values?Should be 2 entries here since there are 2 channels? Or the descriptionabove is wrong.,Technical
,
Reviewed-by: Rob Herring <robh@kernel.org>,Technical
,
"Hello,Maybe use dev_warn(pwm->chip->dev, ...) ?broken indention.Best regardsUwe--Pengutronix e.K.                           | Uwe Kleine-Knig            |Industrial Linux Solutions                 | http://www.pengutronix.de/  |",Technical
,
"Hi Uwe,I'm wondering a bit about this: In this case, the caller that doesn'tprovide a struct device *, PWM provider isn't responsible for that. So Ijust hope this wouldn't be miss-leading ?Oops, I'll fix it.Thanks,Fabrice",Technical
,
"IMHO it's more the wording that might make the message misleading. Ifyou use	dev_warn(pwm->chip->dev, ""No consumer device specified to create a device link to\n"");that's completely fine in my eyes.Best regardsUwe--Pengutronix e.K.                           | Uwe Kleine-Knig            |Industrial Linux Solutions                 | http://www.pengutronix.de/  |",Technical
,
"Thanks for the suggestion, I'll update this as well in v5.Best regards,Fabrice",Technical
,
"Hi Lukasz,Looks good to me.Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>--Best Regards,Chanwoo ChoiSamsung Electronics",Technical
,
"Hi Lukasz,I case of __entry->total_time is zero,why do you show '100' instead of '0'(zero)?I think that it might make the some confusion for user.If it show the '100' in case of ""__entry->total_time is zero"",it cannot distinguish between the real 100% utilizationand ""total_time is zero"".--Best Regards,Chanwoo ChoiSamsung Electronics",Technical
,
"Hi Chanwoo,Good point, I will change it.Regards,Lukasz",Technical
,
"This driver is quite old and we are not actively using/testing it.Are you wiring that up with qemu?Maybe it should be labeled differently in MAINTAINERS file.Anyway whatever fix is fine for me.Acked-by: Michal Simek <michal.simek@xilinx.com>Thanks,Michal",Technical
,
"Not specifically; it may be wired up as uninitialized device.Presumably that is why it reports version 0, which causes the driverto bail out. It is instantiated by the devicetree file (I think).Guenter",Technical
,
"Hi,This crash is now quite persistent in mainline. The fix didn't make it.Should I stop testing virtex-ml507 with qemu ?Guenter",Technical
,
"I've applied the fix now.But given Michal's comments, should we kill the driver for 5.2?--Jens Axboe",Technical
,
"If the driver is no longer used or maintained, removing it would indeedmake sense.Guenter",Technical
,
"I have no problem with it.Thanks,Michal--Michal Simek, Ing. (M.Eng), OpenPGP -> KeyID: FE3D1F91w: www.monstr.eu p: +42-0-721842854Maintainer of Linux kernel - Xilinx MicroblazeMaintainer of Linux kernel - Xilinx Zynq ARM and ZynqMP ARM64 SoCsU-Boot custodian - Xilinx Microblaze/Zynq/ZynqMP/Versal SoCs",Technical
,
"oof, great bug report by the way!  Thanks for the fix.Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Note that ""sparse"" designated initialization zero initializes unnnamed members:https://godbolt.org/z/LkSpJpThis transform you've done is safe because hexium was zero initializedvia kzalloc, and struct hexium contains a struct i2c_adapter (asopposed to  a pointer to a struct i2c_adapter).  The same is true forboth translation units you've touched. LGTM--Thanks,~Nick Desaulniers",Technical
,
"Thanks for the fix! In general, for -Wstack-frame-larger-than=warnings, is it possible that these sets of stack frames are alreadytoo large if entered?  Sure, inlining was a little aggressive, causingmore stack space use than maybe otherwise necessary at runtime, butisn't it also possible that ""no inlining"" a stack frame can still be aproblem should the stack frame be entered?  Doesn't the kernel have away of estimating the stack depth for any given frame?  I guess I wasalways curious if the best fix for these kind of warnings was tonon-stack allocate (kmalloc) certain locally allocated structs, orno-inline the function.  Surely there's cases where no-inlining issafe, but I was curious if it's still maybe dangerous to enter theproblematic child most stack frame?--Thanks,~Nick Desaulniers",Technical
,
"On Tue, Feb 19, 2019 at 8:02 PM Nick Desaulniers<ndesaulniers@google.com> wrote:What I think is happening here is that llvm fails to combine thestack allocations for the inlined functions in certain conditions,while gcc can reuse it here. We had similar issues in gcca few years ago, and they got fixed there, but I have not lookedat this one in more detail. My guess is that it's related tothe bug I mentioned in patch 3.      Arnd",Technical
,
"Please add it for fwht as well. It makes no sense to have it for fwht16, ifwhtbut not the fwht function.Got to say this is all very magic...I think it would be good to perhaps have a comment at the start of the sourcethat explains why noinline_for_stack is added to selected functions.Patches 1 & 3 are fine, BTW.Regards,	Hans",Technical
,
"Your SoB is missing for patch 1. And besides my ack, I'd still like somefeedback from the actual driver maintainers.",Technical
,
"Thanks for the feedback Wolfram. I will wait for input from the driver maintainers.Renesas Electronics Europe GmbH,Geschaeftsfuehrer/President : Michael Hannawald, Sitz der Gesellschaft/Registered office: Duesseldorf, Arcadiastrasse 10, 40472 Duesseldorf, Germany,Handelsregister/Commercial Register: Duesseldorf, HRB 3708 USt-IDNr./Tax identification no.: DE 119353406 WEEE-Reg.-Nr./WEEE reg. no.: DE 14978647",Technical
,
"Any comments?Thanks,Francesco Ruggeri",Technical
,
"Hi Andrey,CONFIG_LDBAF is turned on by default for 32-bit. So all you have to dois remove this line.Thanks,Dinh",Technical
,
"Hello Dinh,Thanks a lot for clarifications here! I suspected that it was thecase, just needed a confirmation here.Is it possible we would have this config option enabled forsocfpga_defconfig? If you would agree, then I prepare a separate patchto have the ""CONFIG_LBDAF is not set"" removed.Thanks a lot!--Andrey.",Technical
,
"Yes, that's what I was alluding to.Dinh",Technical
,
"Nice! I appreciate open-source hardware!Please send the patch via git send-email, it's a bit broken:Applying: dt-bindings: net: can: binding for CTU CAN FD open-source IP core..git/rebase-apply/patch:29: trailing whitespace.error: corrupt patch at line 30Patch failed at 0001 dt-bindings: net: can: binding for CTU CAN FDopen-source IP core.hint: Use 'git am --show-current-patch' to see the failed patchIt's unusual to have uppercase letters here.Is ctu already registered inDocumentation/devicetree/bindings/vendor-prefixes.txt ?Is this needed or not?Is this needed or not?Marc--Pengutronix e.K.                  | Marc Kleine-Budde           |Industrial Linux Solutions        | Phone: +49-231-2826-924     |Vertretung West/Dortmund          | Fax:   +49-5121-206917-5555 |Amtsgericht Hildesheim, HRA 2686  | http://www.pengutronix.de   |",Technical
,
"[+cc Jon, Jens, Christoph, Sagi, Linus, linux-nvme from related discussion][+cc Greg, Oliver, who responded to v2 of this patch]I had actually applied this to pci/msi with the intent of merging itfor v5.1, but by coincidence I noticed [1], where Jon was basicallysolving another piece of the same problem, this time in nvme-pci.AFAICT, the consensus there was that it would be better to find somesort of platform solution instead of dealing with it in individualdrivers.  The PCI core isn't really a driver, but I think the sameargument applies to it: if we had a better way to recover from readl()errors, that way would work equally well in nvme-pci and the PCI core.It sounds like the problem has two parts: the PCI core part and theindividual driver part.  Solving only the first (eg, with this patch)isn't enough by itself, and solving the second via some platformsolution would also solve the first.  If that's the case, I don'tthink it's worth applying this one, but please correct me if I'mwrong.Bjorn[1] https://lore.kernel.org/lkml/20190222010502.2434-1-jonathan.derrick@intel.com/T/#u",Technical
,
"I think that patches with the pattern ""if (disconnected) don't do IO""are fundamentally broken and we should look for alternatives in allcases.They are fundamentally broken because they are racy: if it's an actualsudden disconnect in the middle of IO, there's no guarantee that we'lleven be notified in time.They are fundamentally broken because they add new magic special casesthat very few people will ever test, and the people who do test themtend to do so with old irrelevant kernels.Finally, they are fundamentally broken because they always end upbeing just special cases. One or two special case accesses in adriver, or perhaps all accesses of a particular type in just _one_special driver.Yes, yes, I realize that people want error reporting, and thathot-removal can cause various error conditions (perhaps just parityerrors for the IO, but also perhaps other random errors caused byfirmware perhaps doing special HW setup).But the ""you get a fatal interrupt, so avoid the IO"" kind of model iscompletely broken, and needs to just be fixed differently. See abovewhy it's so completely broken.So if the hw is set up to send some kinf of synchronous interrupt ormachine check that cannot sanely be handled (perhaps because it willjust repeat forever), we should try to just disable said thing.PCIe allows for just polling for errors on the bridges, afaik. It'sbeen years since I looked at it, and maybe I'm wrong. And I bet thereare various ""platform-specific value add"" registers etc that may needtweaking outside of any standard spec for PCIe error reporting. Butlet's do that in a platform driver, to set up the platform to not dothe silly ""I'm just going to die if I see an error"" thing.It's way better to have a model where you poll each bridge once aminute (or one an hour) and let people know ""guys, your hardwarereports errors"", than make random crappy changes to random driversbecause the hardware was set up to die on said errors.And if some MIS person wants the ""hardware will die"" setting, thenthey can damn well have that, and then it's not out problem, but italso means that we don't start changing random drivers for that insanesetting. It's dead, Jim, and it was the users choice.Notice how in neither case does it make sense to try to do some ""if(disconnected) dont_do_io()"" model for the drivers.                  Linus",Technical
,
"I disagree with the idea of doing something you know can cause an errorto propagate. That being said, in this particular case we have come torely a little too much on the if (disconnected) model.You mentioned in the other thread that fixing the GHES driver will paymuch higher dividends. I'm working on reviving a couple of changes to dojust that. Some industry folk were very concerned about the ""don'tpanic()"" approach, and I want to make sure I fairly present theirarguments in the cover letter.I'm hoping one day we'll have the ability to use page tables to preventthe situations that we're trying to fix today in less than ideal ways.Although there are other places in msi.c that use if (disconnected), I'mokay with dropping this change -- provided we come up with an equivalentfix.But even if FFS doesn't crash, do we really want to lose hundreds ofmilliseconds to SMM --on all cores-- when all it takes is a couple ofcycles to check a flag?Alex",Technical
,
"My main gripe with the if (disconnected) model is that it's onlyreally good for inactive devices. If a device is being used then oddsare the driver will do an MMIO before the pci core has had a chance tomark the device as broken so you crash anyway.What's the idea there? Scan the ioremap space for mappings over thedevice BARs and swap them with a normal memory page?Using pci_dev_is_disconnected() to opportunistically avoid waiting forMMIO timeouts is fair enough IMO, even if it's a bit ugly. It wouldhelp your case if you did some measurements to show the improvementand look for other cases it might help. It might also be a good ideato document when it is appropriate to use pci_is_dev_disconnected() sowe aren't stuck having the same argument again and again, but that'sprobably a job for Bjorn though.Oliver",Technical
,
Hi ParshuramAre all versions of the MDIO controller capable of doing C45?    Andrew,Technical
,
"Regards,Parshuram ThombareNow driver support c22 and c45 PHY.Are you suggesting to add check for C45 PHY using is_c45 in phydev ?Regards,Parshuram Thombare",Technical
,
"You are unconditionally supporting C45. Are there versions of thehardware which don't actually support C45? You have this endless loop:+       /* wait for end of transfer */+       while (!MACB_BFEXT(IDLE, macb_readl(bp, NSR)))+               cpu_relax();If there is hardware which does not support C45, will this loopforever?	Andrew",Technical
,
"You need a timeout here, and anywhere you wait for the hardware tocomplete. Try to make use of readx_poll_timeout() variants.	  Andrew",Technical
,
"There is controller which don't support C45. I will add check for that using is_c45.Yes, this bit is supposed to be set. I will add timeout here.Regards,Parshuram Thombare",Technical
,
"Yes, I will add timeout here.Regards,Parshuram Thombare",Technical
,
"You have 3 patches in your series, you need to resend all of them evenif there is only one to which you are making changes, this is notdocumented in netdev-FAQ.rst though, let's update that.--Florian",Technical
,
"Thanks for quick reply.I am still working on other patches, so I think I will send all of them in another single mail chain.Regards,Parshuram Thombare",Technical
,
"$subject line should be:""net: macb: Add c45 PHY support in MDIO read/write functions""Most of this must go below the ""---"" line hereunder...There ^.And the commit message before should look like:""Modify MDIO read/write functions to support communication with C45 PHYin Cadence ethernet controller driver.""You changed tabs to spaces here: please conform to preceding driver'sstyle and other lines of this .h file.Otherwise it looks correct to me on the macb point-of-view.Please correct the little things noted before, re-send independently asa v3 and we also make sure that things are good on the phy side.Best regards,--Nicolas Ferre",Technical
,
"Hi ParshuramSomething i asked last time, but i'm not sure i got an answer.  Do allgenerations of the MDIO controller support C45? If the older versionsonly support C22, we need to be sure it does the right thing whenasked to do a C45 transfer.      Andrew",Technical
,
"Ok, I will change subject in v3 of this patch.Ok.I will change spaces by tab.Thank you for comments. I will make above mentioned changes and re-send thispatch independently as a v3.Regards,Parshuram Thombare",Technical
,
"Hi Andrew,There are some older versions of controller which doesn't support C45. I will makesure that driver return error for C45 transfer requests when it is not supported bycontroller.Regards,Parshuram Thombare",Technical
,
"On Tue, Feb 26, 2019 at 1:00 AM Bjorn Andersson<bjorn.andersson@linaro.org> wrote:Hi Bjorn,I like your name :)If you post a v2 for any reason, please update the subject like to:  PCI: qcom: Add support for sdm845 PCIe controllerThat way it matches the existing conventions and ""git log --onelinedrivers/pci/controller/dwc/pcie-qcom.c"" looks nice.  If there's noneed for a v2, Lorenzo will likely fix that up for you.Bjorn",Technical
,
"Hi Bjorn,Thanks for the patch!What means Q2A? It'd be nice to describe it.Is TBU related to SMMU or to something else?please drop the blank line.you could add dev_err() as well (to be aligned withregulator_bulk_enable and reset_control_assert).for sleeping interval 10us - 20ms you should use usleep_range, pleasefix it.check for errors, please.<cut>--regards,Stan",Technical
,
"I'll see what I can do.Yes, the ARM SMMU is split in a centralized controller (TCU) andtranslation blocks (TBU) for each hardware peripheral. So this is theclock for the translation block sitting between the two PCIe controllersand the system NOC.The clock is described here, rather than in the SMMU node in theupstream way of representing client-related resources - although wedon't use the device_link to toggle it in the implementation below.Sure thing, and I'll throw in some defines for the two 2s, per yourfeedback on the pending QCS404 patch.clk_bulk_prepare_enable() will print an error indicating which of themultiple clocks that failed to turn on, so I don't think adding another- more generic - error line will add value.Looking again shows that I missed that regulator_bulk_enable() does thesame thing, so I will align the two by removing above error print.10ms looks arbitrary as well, I'll review this.Of course.Thanks for your review!Regards,Bjorn",Technical
,
"Here you are reporting a bug. (More on this below.)Here you are introducing a new behavior. (Also discussed below.)Although the two are similar, they are really 2 different things.Wouldn't the fix to the bug be to move the ""skip"" target here?skip:My only objection to this is that the ""messages dropped"" only comes if anon-supressed message comes. So information about dropped informationmay never get printed unless some task prints something non-supressed.Imagine a situation where I am expecting a message to come, but don'tsee it because it was dropped. But if no more non-supressed messagescome, I see neither the expected message nor the dropped message.John Ogness",Technical
,
"[..]I think this is exactly the problem (and thus the patch) we discussed some3 years ago. I had a number of rather strangely looking serial logs, whichclearly had lost messages but no ""%llu printk messages dropped"" markers. SoI added `static bool lost_messages' to console_unlock(), set it when printingloop would discover lost messages, then print ""%llu printk messages dropped""attached to whatever msg was next in the logbuf, regardless of msg->level.IOW, if lost_messages was set then suppress_message_printing(msg->level)was not even invoked. Yes, that would sometimes print several ""debuggingnoise"" messages, but the main part was that I would have ""%llu printkmessages dropped"" markers in the logs; which was much more important tome.P.S. I'm very sorry, I'm overloaded with work at the moment; will start     looking at pending patches in a day or two, or three, or four...	-ss",Technical
,
"I guess you are referring to this [0] thread.I would agree with the proposed solution from 2016. My experience isthat the dropped messages are very important. Yes, printing them couldlead to the loss of even more messages. But still, it is importantinformation that needs to get out.John Ogness[0] https://lkml.kernel.org/r/20161224140902.1962-3-sergey.senozhatsky@gmail.com",Technical
,
"Yes.No, I am replacing random behavior with a predictable one to fixthe bug. The above paragraph explains why the fix looks like it looks.Maybe I should have written somethink like:A solution would be to print the warning regardless the log level.But it might cause loosing more important messages because ofdelay caused by the warnings.A better solution is to count all dropped messages until thereis a non-suppressed one. Then we could print the summarytogether with the message.No, the entire loop skiping suppressed messages is done underthe logbuf_lock. No old messages can be lost inside this loop.Good point! There is a simple fix for this. We could print the warningalso when all messages are proceed and we are about to leavethe for-cycle.Best Regards,Petr",Technical
,
"Right.[..]Yes, printing out messages does take time. But I think it's easier tostart losing messages due to preemption under console_sem than due tocall_console_drivers() latencies.I'd agree. A summary ""you lost %d messages somewhere between currentand previous messages"" is surely better than what we have now, but isstill a bit less informative than ""you lost %d messages just now"".	-ss",Technical
,
Yes! That is the piece that was missing!John Ogness,Technical
,
"I'd prefer to have lost-messages reporting be less of a summaryand more of an ""error"". I think the sooner we report it the better.I don't think that the time we need to print lost-messages on theconsoles is significant enough to worry about it; if call_console_drivers()becomes such a problem that any extra char we print causes message-drop thenwe can disable printk_time or/and printk caller_id prefix printout (cansave us more CPU cycles).	-ss",Technical
,
"Hi Boris,Any comments on this set?Thanks,Yazen",Technical
,
"Hi Boris,I've tested this patch and it gets rid of a slew of these messages:kernel: EDAC amd64: Error: F0 not found, device 0x1460 (broken BIOS?)kernel: EDAC amd64: Error: Error probing instance: 0So please add my:Tested-by: Kim Phillips <kim.phillips@amd.com>Thank you,Kim",Technical
,
"Thanks but please do not top-post when replying to mails on publicmailing lists.--Regards/Gruss,    Boris.Good mailing practices for 400: avoid top-posting and trim the reply.",Technical
,
"Please don't do silly things like that:In file included from drivers/edac/amd64_edac_inj.c:2:0:drivers/edac/amd64_edac.h:279:11: warning: ‘num_umcs’ defined but not used [-Wunused-variable] static u8 num_umcs;           ^~~~~~~~I fixed it up now.--Regards/Gruss,    Boris.Good mailing practices for 400: avoid top-posting and trim the reply.",Technical
,
Thanks. Sorry I missed that.-Yazen,Technical
,
"On Fri, Mar 1, 2019 at 4:51 PM Gustavo A. R. Silva<gustavo@embeddedor.com> wrote:Already fixed:https://cgit.freedesktop.org/~agd5f/linux/commit/?h=drm-next-5.2-wip&id=6feaa4194c18578623565017f95d1b2f6b243567Alex",Technical
,
"Awesome. :)I was looking for that link, but I didn't find it.  That's whyI sent this patch.Happy to see it is fixed now.Thanks, Alex.--Gustavo",Technical
,
Reviewed-by: Huang Rui <ray.huang@amd.com>,Technical
,
"Hi Shaokun, HeinerAlthough this fixes the warning, i suspect there i something wrongwith the original patch adding mv88e6390x_port_set_cmode(). It shouldalso be used without CONFIG_NET_DSA_LEGACY.     Andrew",Technical
,
"Hi Andrew,I checked the commit-id 2a93c1a3651f (""net: dsa: Allow compiling out legacy support"") by Florian.Do you mean that CONFIG_NET_DSA_LEGACY shall be removed completely? :-)Thanks,Shaokun",Technical
,
"No, i suspect mv88e6390x_ports_cmode_init() is being called from thewrong place, or needs to be called from a second location.[Goes and looks at the code]Yes, it should also be called in mv88e6xxx_probe(). I would call itjust after the call to mv88e6xxx_detect(), so that it is the same asin mv88e6xxx_drv_probe().There are two ways DSA drivers can be probed. The legacy way, which isoptional, and is slowly getting removed, and the current way. Heineris new to DSA and probably missed that, and only handled the legacyprobe method. I also missed checking when i reviewed to patch :-(   Andrew",Technical
,
"Right, I missed that, will submit a fix.I just saw that the Kconfig entry comment for NET_DSA_LEGACY says:""This feature is scheduled for removal in 4.17.""Was forgotten to remove it or did somebody scream loud enough""But I depend on it"" ?Heiner",Technical
,
"The intent was to remove it by that kernel version but the 88e6060driver still depends on it, and there appears to be some active usersthat Andrew worked with.--Florian",Technical
,
"I see, thanks. And migrating this driver to the new DSA frameworkversion isn't possible or not worth the effort?",Technical
,
Andrew is working on it actually. We could have 88E6060 selectNET_DSA_LEGACY and drop legacy probing from mv88e6xxx as an in betweensolution.--Florian,Technical
,
"Hi Andrew,Ok, I didn't check it carefully.Hmm, I am not familiar wit it, please feel free to fix it.Thanks,Shaokun",Technical
,
All files being opened by the kernel should be calling one of thesehelper routines.  Has that changed?Mimi,Technical
,
"Mimi Zohar <zohar@linux.ibm.com> wrote:prepare_binprm() uses kernel_read() and has done since at least 2014.  Thebinfmt drivers also use kernel_read().Since kernel_read_file() is used by a bunch of things that aren't exec, evenif we switch exec to it, it should probably still go in fs/read_write.c sinceit seems generic.David",Technical
,
"Oh, commit bdd1d2d3d251 (""fs: fix kernel_read prototype"") movedkernel_read() to fs/read_write.c without moving the helpers. Definitely makes sense to move the helpers.  Please include areference to the commit in this patch.Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>",Technical
,
"On Wed, Mar 6, 2019 at 3:05 AM Elena Reshetova<elena.reshetova@intel.com> wrote:These look good to me. Perhaps they can go via -mm, maybe with Ericand/or Peter's ack/review? I'd really like to get these done so we canget closer to finishing the refcount_t conversions...Thanks!-Kees--Kees Cook",Technical
,
"Some of these patches probably fix issues, like making PASID workcorrectly on VFs.  But that needs to be made explicit in the commitlogs.The current commit logs read more like ""make XYZ follow the spec"",and that's not really what we need to know.  The commit log needs totell us why we need the change, not just what the spec says.For example, maybe VFs can't use PASID because Linux incorrectly triesto use the PASID capability on the VF when it should be using thecapability on the PF.  The commit log should say that explicitly andalso say what the current behavior is, e.g., does it cause IOMMUfaults, does it cause data corruption, does some DMA mapping interfacecalled by the VF driver fail when it shouldn't, etc?Bjorn",Technical
,
ping.,Technical
,
"Hi David,Is there something need do for this patch? Pls let me know.I saw the patchwork status labled to  'Not Applicable'https://patchwork.ozlabs.org/patch/1052624/",Technical
,
"Hi Abel,I am afraid of this change. Besides the rate there might be otherreasons to choose one mux input over another, consider for example lowpower audio playback where we need one specific mux setting because itprovides a clock which runs at low power mode.On the IPU on i.MX5/6 there are clocks being used as pixel clocksderived from different muxes. I don't think you want to pick an inputclock just because it happens to deliver the best clock rate at thatpoint in time, but really is shared with some other clock that changesits rate in the next moment.I have no concrete examples for things that break with this change, butI would be more confident if we change the behaviour explicitly only forthe muxes that we have reviewed to cope with this change.Sascha--Pengutronix e.K.                           |                             |Industrial Linux Solutions                 | http://www.pengutronix.de/  |Peiner Str. 6-8, 31137 Hildesheim, Germany | Phone: +49-5121-206917-0    |Amtsgericht Hildesheim, HRA 2686           | Fax:   +49-5121-206917-5555 |",Technical
,
Fair enough. We could replace all the imx_clk_mux with imx_clk_mux_noreparentand after that we can independently switch the clocks that are safe (to switch)to imx_clk_mux (which would not have the noreparent flag set).The main idea is to simplify the clock control from drivers point of view.The end goal here would be to only have noreparent flag set for the clocks thatneed specific mux control.,Technical
,
"Ok with me.Which drivers do you have in mind? I hardly ever missed reparenting onrate changes, so where is this feature useful?Sascha--Pengutronix e.K.                           |                             |Industrial Linux Solutions                 | http://www.pengutronix.de/  |Peiner Str. 6-8, 31137 Hildesheim, Germany | Phone: +49-5121-206917-0    |Amtsgericht Hildesheim, HRA 2686           | Fax:   +49-5121-206917-5555 |",Technical
,
"Hi Sascha,Reparenting is very useful for Audio IPs (SAI, SPDIF, PDM, FSL DSP).We often need clock rates that are multiples of 8000 or 11025which can be obtain from different PLLs. But in order for this to workwe need to have the correct parent.In our current tree we do the re parenting manually inside drivers. For example:https://source.codeaurora.org/external/imx/linux-imx/tree/sound/soc/fsl/fsl_sai.c?h=imx_4.14.78_1.0.0_ga#n244This is far from optimal. Abel's patch will be of a great help for Audio.thanks,Daniel.",Technical
,
"Take for instance this one (.config attached); it has bothCONFIG_PROFILE_ALL_BRANCHES=y and CONFIG_TRACE_BRANCH_PROFILING=yand it compiles:(from kernel/exit.c)SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,		infop, int, options, struct rusage __user *, ru){	struct rusage r;	struct waitid_info info = {.status = 0};	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);	int signo = 0;	if (err > 0) {		signo = SIGCHLD;		err = 0;		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))			return -EFAULT;	}	if (!infop)		return err;	if (!user_access_begin(infop, sizeof(*infop)))		return -EFAULT;	unsafe_put_user(signo, &infop->si_signo, Efault);	unsafe_put_user(0, &infop->si_errno, Efault);	unsafe_put_user(info.cause, &infop->si_code, Efault);	unsafe_put_user(info.pid, &infop->si_pid, Efault);	unsafe_put_user(info.uid, &infop->si_uid, Efault);	unsafe_put_user(info.status, &infop->si_status, Efault);	user_access_end();	return err;Efault:	user_access_end();	return -EFAULT;}into this atrocious crap (grep -v ffffffffffffe0eb; if you want the srcto go away):$ objdump -Sdr randconfig-build/kernel/exit.o | awk ""/>:\$/ { P=0; } /__do_sys_waitid>:\$/ { P=1; O=strtonum(\""0x\"" \$1); } { if (P) { o=strtonum(\""0x\"" \$1); printf(\""%04x \"", o-O); print \$0; } }""0000 0000000000001f15 <__do_sys_waitid>:ffffffffffffe0ebffffffffffffe0eb SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,ffffffffffffe0eb 		infop, int, options, struct rusage __user *, ru)ffffffffffffe0eb {0000     1f15:	55                   	push   %rbpffffffffffffe0eb 	struct rusage r;ffffffffffffe0eb 	struct waitid_info info = {.status = 0};ffffffffffffe0eb 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);0001     1f16:	b8 00 00 00 00       	mov    $0x0,%eaxffffffffffffe0eb {0006     1f1b:	48 89 e5             	mov    %rsp,%rbp0009     1f1e:	41 57                	push   %r15000b     1f20:	41 56                	push   %r14000d     1f22:	41 55                	push   %r13000f     1f24:	41 54                	push   %r120011     1f26:	4d 89 c4             	mov    %r8,%r120014     1f29:	53                   	push   %rbx0015     1f2a:	48 89 d3             	mov    %rdx,%rbx0018     1f2d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp001c     1f31:	48 81 ec a0 00 00 00 	sub    $0xa0,%rspffffffffffffe0eb 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);0023     1f38:	4d 85 e4             	test   %r12,%r120026     1f3b:	4c 8d 44 24 10       	lea    0x10(%rsp),%r8002b     1f40:	48 89 e2             	mov    %rsp,%rdxffffffffffffe0eb 	struct waitid_info info = {.status = 0};002e     1f43:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)0035     1f4a:	000036     1f4b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)003d     1f52:	00 00ffffffffffffe0eb 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);003f     1f54:	4c 0f 44 c0          	cmove  %rax,%r80043     1f58:	e8 9c fe ff ff       	callq  1df9 <kernel_waitid>ffffffffffffe0eb 	int signo = 0;ffffffffffffe0ebffffffffffffe0eb 	if (err > 0) {0048     1f5d:	48 85 c0             	test   %rax,%raxffffffffffffe0eb 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);004b     1f60:	49 89 c7             	mov    %rax,%r15ffffffffffffe0eb 	if (err > 0) {004e     1f63:	0f 9f c0             	setg   %al0051     1f66:	0f b6 c0             	movzbl %al,%eax0054     1f69:	48 83 c0 02          	add    $0x2,%rax0058     1f6d:	48 ff 04 c5 00 00 00 	incq   0x0(,%rax,8)005f     1f74:	00005c 			1f71: R_X86_64_32S	_ftrace_branch+0x1c00060     1f75:	4d 85 ff             	test   %r15,%r150063     1f78:	7e 7b                	jle    1ff5 <__do_sys_waitid+0xe0>ffffffffffffe0eb 		signo = SIGCHLD;ffffffffffffe0f9 		err = 0;ffffffffffffe0eb 		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))0065     1f7a:	31 d2                	xor    %edx,%edx0067     1f7c:	4d 85 e4             	test   %r12,%r12006a     1f7f:	74 53                	je     1fd4 <__do_sys_waitid+0xbf>ffffffffffffe0ebffffffffffffe0eb static __always_inline boolffffffffffffe0f7 check_copy_size(const void *addr, size_t bytes, bool is_source)ffffffffffffe0eb {ffffffffffffe0eb 	int sz = __compiletime_object_size(addr);ffffffffffffe0eb 	if (unlikely(sz >= 0 && sz < bytes)) {006c     1f81:	31 f6                	xor    %esi,%esi006e     1f83:	b9 01 00 00 00       	mov    $0x1,%ecx0073     1f88:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi0076 			1f8b: R_X86_64_32S	_ftrace_annotated_branch+0xcc0007a     1f8f:	e8 00 00 00 00       	callq  1f94 <__do_sys_waitid+0x7f>007b 			1f90: R_X86_64_PLT32	ftrace_likely_update-0x4ffffffffffffe0eb }ffffffffffffe0ebffffffffffffe0eb static __always_inline unsigned long __must_checkffffffffffffe0f7 copy_to_user(void __user *to, const void *from, unsigned long n)ffffffffffffe0eb {ffffffffffffe0eb 	if (likely(check_copy_size(from, n, true)))007f     1f94:	31 c9                	xor    %ecx,%ecx0081     1f96:	ba 01 00 00 00       	mov    $0x1,%edx0086     1f9b:	be 01 00 00 00       	mov    $0x1,%esi008b     1fa0:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi008e 			1fa3: R_X86_64_32S	_ftrace_annotated_branch+0xae00092     1fa7:	48 ff 05 00 00 00 00 	incq   0x0(%rip)        # 1fae <__do_sys_waitid+0x99>0095 			1faa: R_X86_64_PC32	_ftrace_branch+0x1fcc0099     1fae:	e8 00 00 00 00       	callq  1fb3 <__do_sys_waitid+0x9e>009a 			1faf: R_X86_64_PLT32	ftrace_likely_update-0x4ffffffffffffe0eb 		n = _copy_to_user(to, from, n);009e     1fb3:	ba 90 00 00 00       	mov    $0x90,%edx00a3     1fb8:	4c 89 e7             	mov    %r12,%rdiffffffffffffe0eb 	if (likely(check_copy_size(from, n, true)))00a6     1fbb:	48 ff 05 00 00 00 00 	incq   0x0(%rip)        # 1fc2 <__do_sys_waitid+0xad>00a9 			1fbe: R_X86_64_PC32	_ftrace_branch+0x1d7cffffffffffffe0eb 		n = _copy_to_user(to, from, n);00ad     1fc2:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi00b2     1fc7:	e8 00 00 00 00       	callq  1fcc <__do_sys_waitid+0xb7>00b3 			1fc8: R_X86_64_PLT32	_copy_to_user-0x400b7     1fcc:	31 d2                	xor    %edx,%edx00b9     1fce:	48 85 c0             	test   %rax,%rax00bc     1fd1:	0f 95 c2             	setne  %dl00bf     1fd4:	48 63 c2             	movslq %edx,%raxffffffffffffe0eb 		signo = SIGCHLD;00c2     1fd7:	41 be 11 00 00 00    	mov    $0x11,%r14dffffffffffffe0f9 		err = 0;00c8     1fdd:	45 31 ff             	xor    %r15d,%r15dffffffffffffe0eb 		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))00cb     1fe0:	48 83 c0 02          	add    $0x2,%rax00cf     1fe4:	48 ff 04 c5 00 00 00 	incq   0x0(,%rax,8)00d6     1feb:	0000d3 			1fe8: R_X86_64_32S	_ftrace_branch+0x19800d7     1fec:	85 d2                	test   %edx,%edx00d9     1fee:	74 08                	je     1ff8 <__do_sys_waitid+0xe3>00db     1ff0:	e9 33 01 00 00       	jmpq   2128 <__do_sys_waitid+0x213>ffffffffffffe0eb 	int signo = 0;00e0     1ff5:	45 31 f6             	xor    %r14d,%r14dffffffffffffe0eb 			return -EFAULT;ffffffffffffe0eb 	}ffffffffffffe0eb 	if (!infop)00e3     1ff8:	31 c0                	xor    %eax,%eax00e5     1ffa:	48 85 db             	test   %rbx,%rbx00e8     1ffd:	0f 94 c0             	sete   %al00eb     2000:	48 83 c0 02          	add    $0x2,%rax00ef     2004:	48 ff 04 c5 00 00 00 	incq   0x0(,%rax,8)00f6     200b:	0000f3 			2008: R_X86_64_32S	_ftrace_branch+0x17000f7     200c:	48 85 db             	test   %rbx,%rbx00fa     200f:	0f 84 1a 01 00 00    	je     212f <__do_sys_waitid+0x21a>ffffffffffffe0eb 	return raw_cpu_read_4(__preempt_count) & ~PREEMPT_NEED_RESCHED;0100     2015:	65 44 8b 25 00 00 00 	mov    %gs:0x0(%rip),%r12d        # 201d <__do_sys_waitid+0x108>0107     201c:	000104 			2019: R_X86_64_PC32	__preempt_count-0x4ffffffffffffe0eb  * checking before using them, but you have to surround them with theffffffffffffe0eb  * user_access_begin/end() pair.ffffffffffffe0eb  */ffffffffffffe0eb static __must_check __always_inline bool user_access_begin(const void __user *ptr, size_t len)ffffffffffffe0eb {ffffffffffffe0eb 	if (unlikely(!access_ok(ptr,len)))0108     201d:	45 31 ed             	xor    %r13d,%r13d010b     2020:	41 81 e4 00 01 1f 00 	and    $0x1f0100,%r12d0112     2027:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi0115 			202a: R_X86_64_32S	_ftrace_annotated_branch+0xb700119     202e:	41 0f 95 c5          	setne  %r13b011d     2032:	31 c9                	xor    %ecx,%ecx011f     2034:	31 d2                	xor    %edx,%edx0121     2036:	44 89 ee             	mov    %r13d,%esi0124     2039:	e8 00 00 00 00       	callq  203e <__do_sys_waitid+0x129>0125 			203a: R_X86_64_PLT32	ftrace_likely_update-0x40129     203e:	49 63 c5             	movslq %r13d,%rax012c     2041:	48 83 c0 02          	add    $0x2,%rax0130     2045:	48 ff 04 c5 00 00 00 	incq   0x0(,%rax,8)0137     204c:	000134 			2049: R_X86_64_32S	_ftrace_branch+0x1d900138     204d:	45 85 e4             	test   %r12d,%r12d013b     2050:	74 02                	je     2054 <__do_sys_waitid+0x13f>013d     2052:	0f 0b                	ud2013f     2054:	31 c9                	xor    %ecx,%ecx0141     2056:	31 d2                	xor    %edx,%edx0143     2058:	44 89 ee             	mov    %r13d,%esi0146     205b:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi0149 			205e: R_X86_64_32S	_ftrace_annotated_branch+0xb40014d     2062:	e8 00 00 00 00       	callq  2067 <__do_sys_waitid+0x152>014e 			2063: R_X86_64_PLT32	ftrace_likely_update-0x4ffffffffffffe0eb 		return unlikely(addr > limit - size);0152     2067:	45 31 e4             	xor    %r12d,%r12d0155     206a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi0158 			206d: R_X86_64_32S	_ftrace_annotated_branch+0xbd0015c     2071:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax0163     2078:	00 000161 			2076: R_X86_64_32S	current_task0165     207a:	4c 8b a8 d8 1d 00 00 	mov    0x1dd8(%rax),%r13016c     2081:	49 83 c5 80          	add    $0xffffffffffffff80,%r130170     2085:	4c 39 eb             	cmp    %r13,%rbx0173     2088:	41 0f 97 c4          	seta   %r12b0177     208c:	31 c9                	xor    %ecx,%ecx0179     208e:	31 d2                	xor    %edx,%edx017b     2090:	44 89 e6             	mov    %r12d,%esi017e     2093:	e8 00 00 00 00       	callq  2098 <__do_sys_waitid+0x183>017f 			2094: R_X86_64_PLT32	ftrace_likely_update-0x4ffffffffffffe0eb 	if (unlikely(!access_ok(ptr,len)))0183     2098:	31 f6                	xor    %esi,%esi0185     209a:	4c 39 eb             	cmp    %r13,%rbx0188     209d:	ba 01 00 00 00       	mov    $0x1,%edx018d     20a2:	40 0f 96 c6          	setbe  %sil0191     20a6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi0194 			20a9: R_X86_64_32S	_ftrace_annotated_branch+0xb100198     20ad:	31 c9                	xor    %ecx,%ecx019a     20af:	e8 00 00 00 00       	callq  20b4 <__do_sys_waitid+0x19f>019b 			20b0: R_X86_64_PLT32	ftrace_likely_update-0x4019f     20b4:	44 89 e6             	mov    %r12d,%esi01a2     20b7:	31 c9                	xor    %ecx,%ecx01a4     20b9:	31 d2                	xor    %edx,%edx01a6     20bb:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi01a9 			20be: R_X86_64_32S	_ftrace_annotated_branch+0xba001ad     20c2:	49 83 c4 02          	add    $0x2,%r1201b1     20c6:	e8 00 00 00 00       	callq  20cb <__do_sys_waitid+0x1b6>01b2 			20c7: R_X86_64_PLT32	ftrace_likely_update-0x401b6     20cb:	4a ff 04 e5 00 00 00 	incq   0x0(,%r12,8)01bd     20d2:	0001ba 			20cf: R_X86_64_32S	_ftrace_branch+0x1db8ffffffffffffe0eb 		return 0;01be     20d3:	31 c0                	xor    %eax,%eaxffffffffffffe0eb 	if (unlikely(!access_ok(ptr,len)))01c0     20d5:	4c 39 eb             	cmp    %r13,%rbx01c3     20d8:	77 08                	ja     20e2 <__do_sys_waitid+0x1cd>ffffffffffffe0eb 	__uaccess_begin_nospec();01c5     20da:	90                   	nop01c6     20db:	90                   	nop01c7     20dc:	90                   	nopffffffffffffe0eb }ffffffffffffe0ebffffffffffffe0eb static __always_inline void stac(void)ffffffffffffe0eb {ffffffffffffe0eb 	/* Note: a barrier is implicit in alternative() */ffffffffffffe0f5 	alternative("""", __stringify(__ASM_STAC), X86_FEATURE_SMAP);01c8     20dd:	90                   	nop01c9     20de:	90                   	nop01ca     20df:	90                   	nopffffffffffffe0eb 	return 1;01cb     20e0:	b0 01                	mov    $0x1,%alffffffffffffe0eb 		return err;ffffffffffffe0ebffffffffffffe0eb 	if (!user_access_begin(infop, sizeof(*infop)))01cd     20e2:	83 f0 01             	xor    $0x1,%eax01d0     20e5:	48 89 c2             	mov    %rax,%rdx01d3     20e8:	83 e2 01             	and    $0x1,%edx01d6     20eb:	48 83 c2 02          	add    $0x2,%rdx01da     20ef:	48 ff 04 d5 00 00 00 	incq   0x0(,%rdx,8)01e1     20f6:	0001de 			20f3: R_X86_64_32S	_ftrace_branch+0x14801e2     20f7:	84 c0                	test   %al,%al01e4     20f9:	75 2d                	jne    2128 <__do_sys_waitid+0x213>ffffffffffffe0eb 		return -EFAULT;ffffffffffffe0ebffffffffffffe0eb 	unsafe_put_user(signo, &infop->si_signo, Efault);01e6     20fb:	44 89 33             	mov    %r14d,(%rbx)ffffffffffffe0eb 	unsafe_put_user(0, &infop->si_errno, Efault);01e9     20fe:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%rbx)ffffffffffffe0eb 	unsafe_put_user(info.cause, &infop->si_code, Efault);01f0     2105:	8b 44 24 0c          	mov    0xc(%rsp),%eax01f4     2109:	89 43 08             	mov    %eax,0x8(%rbx)ffffffffffffe0eb 	unsafe_put_user(info.pid, &infop->si_pid, Efault);01f7     210c:	8b 04 24             	mov    (%rsp),%eax01fa     210f:	89 43 10             	mov    %eax,0x10(%rbx)ffffffffffffe0eb 	unsafe_put_user(info.uid, &infop->si_uid, Efault);01fd     2112:	8b 44 24 04          	mov    0x4(%rsp),%eax0201     2116:	89 43 14             	mov    %eax,0x14(%rbx)ffffffffffffe0eb 	unsafe_put_user(info.status, &infop->si_status, Efault);0204     2119:	8b 44 24 08          	mov    0x8(%rsp),%eax0208     211d:	89 43 18             	mov    %eax,0x18(%rbx)ffffffffffffe0eb 	user_access_end();020b     2120:	90                   	nop020c     2121:	90                   	nop020d     2122:	90                   	nopffffffffffffe0eb 	return err;020e     2123:	eb 0a                	jmp    212f <__do_sys_waitid+0x21a>ffffffffffffefe5 Efault:ffffffffffffe0eb 	user_access_end();0210     2125:	90                   	nop0211     2126:	90                   	nop0212     2127:	90                   	nopffffffffffffe0eb 	return -EFAULT;0213     2128:	49 c7 c7 f2 ff ff ff 	mov    $0xfffffffffffffff2,%r15ffffffffffffe0eb }021a     212f:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp021e     2133:	4c 89 f8             	mov    %r15,%rax0221     2136:	5b                   	pop    %rbx0222     2137:	41 5c                	pop    %r120224     2139:	41 5d                	pop    %r130226     213b:	41 5e                	pop    %r140228     213d:	41 5f                	pop    %r15022a     213f:	5d                   	pop    %rbp022b     2140:	c3                   	retqffffffffffffe0ebAnd then complains about:$ tools/objtool/objtool check --no-fp --uaccess --backtrace randconfig-build/kernel/exit.orandconfig-build/kernel/exit.o: warning: objtool: .altinstr_replacement+0xc: redundant UACCESS disablerandconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x210: (alt)randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x1e6: (alt)randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x1c3: (branch)randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x13b: (branch)randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x63: (branch)randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x0: <=== (func)Which, afaict is correct given the asm, but is absolute nonsense giventhe original C. If you follow that code path, it appears to do thememops without STAC, and then complains it does CLAC. Which is of coursecomplete crap.Maybe I've been staring at this too long and am (again) missing theobvious :/",Technical
,
"No, this is a hypercall with parameters passed through from user land(Xen tools). So setting AC=1 is not related to hysterical reasons, butto indicate that unprivileged buffers are okay here. So please changethe commit message to something like:Some Xen hypercalls allow parameter buffers in user land, so they needto set AC=1. Avoid the warning for those cases.Mind Cc-ing the maintainers of the code you are touching in futurepatches?With the commit message adjusted:Reviewed-by: Juergen Gross <jgross@suse.com>Juergen",Technical
,
"*yuck* that's gross...And I understood from Andrew yesterday (but perhaps I misunderstood)that the whole privcmd thing was a bit of a hack.But sure, I'll change the message.Sure; my bad, I forgot to ask get_maintainers about this.",Technical
,
"That was an unwise design decision in the past, yes. Changing it willrequire a lot of effort.Thanks. :-)Juergen",Technical
,
"taken: randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x1c3: (branch)Bye-bye STAC, jumped straight over.we do not take this branch and fall-through.fault, take exception:  randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x1e6: (alt)Relocation section '.rela__ex_table' at offset 0x21568 contains 18 entries:Offset          Info           Type           Sym. Value    Sym. Name + Addend000000000000  000200000002 R_X86_64_PC32     0000000000000000 .text + 20fb000000000004  000200000002 R_X86_64_PC32     0000000000000000 .text + 2125 randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x210: (alt)000000000034  000200000002 R_X86_64_PC32     0000000000000000 .text + 2125000000000038  00c800000002 R_X86_64_PC32     0000000000000000 .altinstr_replacement + c0000000000000000 <.altinstr_replacement>:c:   0f 01 ca                clac randconfig-build/kernel/exit.o: warning: objtool: .altinstr_replacement+0xc: redundant UACCESS disable",Technical
,
"randconfig-build/kernel/exit.o: warning: objtool:   __do_sys_waitid()+0x1c3: (branch)And that is the error, I think. We should've taken it and went to:  return -EFAULT;because: +1be	xor  %eax,%eax	eax=0 +1cd   xor  $0x1,%eax	eax=1 +1e2   test %al,%al	1&1==1 -> ZF=0 +1e4   jnzIs an unconditional code sequence, but there's no way objtool can dothat without becoming a full blown interpreter :/",Technical
,
"How about just turning off SMAP checking for the really odd cases?At some point it's not worth worrying about excessive debuginfrastructure, I think. Just give up and say ""ok. we'll save/restorein preempt_schedule()"".Or just make preempt_schedule() check AC and not schedule. It alreadydoes that for IF.                   Linus",Technical
,
"It's certainly one of the safer functions to call with AC set, but itsounds wrong anyway. It's not like it's likely to leak kernel data(most memset's are with 0, and even the non-zero ones I can't imagineare sensitive - more like poison values etc).What's the call site that made you go ""just add __memset() to the list""?            Linus",Technical
,
"This ""fixes"" it, and also seems to help -Os make much code:diff --git a/include/linux/compiler.h b/include/linux/compiler.hindex 445348facea9..8de63db58fdd 100644--- a/include/linux/compiler.h+++ b/include/linux/compiler.h@@ -67,7 +67,7 @@ void ftrace_likely_update(struct ftrace_likely_data *f, int val, 				.line = __LINE__,			\ 			};						\ 		______r = !!(cond);					\-		______f.miss_hit[______r]++;					\+		if (______r) ______f.miss_hit[1]++; else ______f.miss_hit[0]++; \ 		______r;						\ 	})) #endif /* CONFIG_PROFILE_ALL_BRANCHES */",Technical
,
much *smaller* code--Josh,Technical
,
"Yeah, considering that this __trace_if() macro from hell is doing an'if()' on the result of that inner thing, it makes sense to *not*  usethat ""looks simpler and shorter"" array sequence, but depend on thecompiler then noticing that the conditionals are the same and joiningthe two branches together.The compiler has to do much more work to either generate the actualdynamic array thing, or notice that the _index_ of the array matchesthe _conditional_ on the branch, and undo that thing.But that macro really is the macro from hell regardless.Do people really use CONFIG_PROFILE_ALL_BRANCHES?                Linus",Technical
,
if (cond)?  Or is ___r used elsewhere?--Sent from my Android device with K-9 Mail. Please excuse my brevity.,Technical
,
Agreed... it seems fishy at least.--Sent from my Android device with K-9 Mail. Please excuse my brevity.,Technical
,
"Yeah, agreed.  Now it doesn't have to do the funky xor thing to convertthe conditional to an int.IIRC, Steven runs it once a year or so...--Josh",Technical
,
______r is also the return value.  And it's needed because cond shouldonly be evaluated once.--Josh,Technical
,
So put a true; and false; inside the if.--Sent from my Android device with K-9 Mail. Please excuse my brevity.,Technical
,
"That's TRACE_BRANCH_PROFILING; PROFILE_ALL_BRANCHES I don't know, thatmostly just gets in the way I think.Also; it seems to me that something PT, or maybe even simply:  perf -e branches -e branch-misseswould get you similar or sufficient information.",Technical
,
"__asan_{,un}poinson_stack_memory()  kasan_{,un}poison_shadow()    __memset()",Technical
,
Excellen; let me put the kids to bed and then I'll have a poke.,Technical
,
"Yeah, I'm not really seeing a lot of upside to PROFILE_ALL_BRANCHES.Particularly since it doesn't actually profile all branches at all. Itonly basically profiles ""if ()"" statements, which obviously missesloops etc, but then also _does_ hit things where people turned loopsinto ""if (unlikely()) loop()"", which happens in (for example)low-level locking code etc that often has a fast-case ""first try""thing followed by a slow-case ""ok, let's loop for it"" thing.So I think PROFILE_ALL_BRANCHES tends to have very random coverage.I'd love to get rid of it, because it seems so random.               Linus",Technical
,
Is that possible to do in a C macro?  Doesn't seem to work for me...--Josh,Technical
,
"Here's a proper patch.From: Josh Poimboeuf <jpoimboe@redhat.com>Subject: [PATCH] tracing: Improve ""if"" macro code generationWith CONFIG_PROFILE_ALL_BRANCHES, the ""if"" macro converts theconditional to an array index.  This can cause GCC to create horriblecode.  When there are nested ifs, the generated code uses registervalues to encode branching decisions.Make it easier for GCC to optimize by keeping the conditional as aconditional rather than converting it to an integer.  This shrinks thegenerated code quite a bit, and also makes the code sane enough forobjtool to understand.Reported-by: Peter Zijlstra <peterz@infradead.org>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>--- include/linux/compiler.h | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)diff --git a/include/linux/compiler.h b/include/linux/compiler.hindex 445348facea9..d58aa0db05f9 100644--- a/include/linux/compiler.h+++ b/include/linux/compiler.h@@ -67,7 +67,7 @@ void ftrace_likely_update(struct ftrace_likely_data *f, int val, 				.line = __LINE__,			\ 			};						\ 		______r = !!(cond);					\-		______f.miss_hit[______r]++;					\+		______r ? ______f.miss_hit[1]++ : ______f.miss_hit[0]++;\ 		______r;						\ 	})) #endif /* CONFIG_PROFILE_ALL_BRANCHES */--2.17.2",Technical
,
"The meat of that macro could easily be done as a helper inline function.But as mentioned, I think a better option would be to remove itentirely, if at all possible.The best part about that config option is the comment, and while cuteI don't think that's really worth saving it for...               Linus",Technical
,
"Ugh. I think I almost just agree with your decision to just let thatmemset go unchecked.I'm not saying it's right, but it doesn't seem to be a fight worth fighting.Again, maybe we could avoid the static checking entirely for thecomplex configs, and just make preempt_schedule() not do it for ACregions.Because AC vs KASAN in general ends up smelling like ""not a fightworth fighting"" to me. You've done a herculean job, but..                 Linus",Technical
,
Let's move it instead.  I looked at the code and it should be fine.--Andy,Technical
,
"On Thu, 7 Mar 2019 09:45:35 -0800Linus Torvalds <torvalds@linux-foundation.org> wrote:As Josh said, I run it once a year on two production (real use)machines for 2 to 4 weeks and collect the data to see if there areplaces that can be optimized better.I currently have one of my engineers looking at the data and may besending patches soon. It's basically an entry level way to get intokernel development. Note, no patch will be sent just because of thedata from the profiling. The task is to look at and understand thecode, and see if it can be optimized (with likely/unlikely or flowchanges). It's a way to get a better understanding of the kernel invarious locations. It is by no means ""profiler said this, lets changeit."" All changes must be rational, and make sense. The profiler is onlyused to help find those places.The data that was run at the end of January can be found here: http://rostedt.homelinux.com/branches/mammoth-branches-2019/ http://rostedt.homelinux.com/branches/gandalf-branches-2019/-- Steve",Technical
,
"One think I could do; is add a filter to each function and only allow__memset from the kasan code, and not from anywhere else.Another thing I need to look at is why objtool only found memset_orig(from __memset) but not memset_erms, which if I read the code right, isa possible alternative there.I know,.. I've been so close to doing that so many times, but itseems like defeat, esp. since I'm so close now :-)",Technical
,
___memset_kasan()?--Sent from my Android device with K-9 Mail. Please excuse my brevity.,Technical
,
"Something like so; or did I miss something subtle?--- a/arch/x86/kernel/signal.c+++ b/arch/x86/kernel/signal.c@@ -132,16 +132,6 @@ static int restore_sigcontext(struct pt_ 		COPY_SEG_CPL3(cs); 		COPY_SEG_CPL3(ss);-#ifdef CONFIG_X86_64-		/*-		 * Fix up SS if needed for the benefit of old DOSEMU and-		 * CRIU.-		 */-		if (unlikely(!(uc_flags & UC_STRICT_RESTORE_SS) &&-			     user_64bit_mode(regs)))-			force_valid_ss(regs);-#endif- 		get_user_ex(tmpflags, &sc->flags); 		regs->flags = (regs->flags & ~FIX_EFLAGS) | (tmpflags & FIX_EFLAGS); 		regs->orig_ax = -1;		/* disable syscall checks */@@ -150,6 +140,15 @@ static int restore_sigcontext(struct pt_ 		buf = (void __user *)buf_val; 	} get_user_catch(err);+#ifdef CONFIG_X86_64+	/*+	 * Fix up SS if needed for the benefit of old DOSEMU and+	 * CRIU.+	 */+	if (unlikely(!(uc_flags & UC_STRICT_RESTORE_SS) && user_64bit_mode(regs)))+		force_valid_ss(regs);+#endif+ 	err |= fpu__restore_sig(buf, IS_ENABLED(CONFIG_X86_32)); 	force_iret();@@ -441,7 +440,7 @@ static int __setup_rt_frame(int sig, str 	return 0; } #else /* !CONFIG_X86_32 */-static unsigned long frame_uc_flags(struct pt_regs *regs)+static __always_inline unsigned long frame_uc_flags(struct pt_regs *regs) { 	unsigned long flags;@@ -461,6 +460,7 @@ static int __setup_rt_frame(int sig, str { 	struct rt_sigframe __user *frame; 	void __user *fp = NULL;+	unsigned long uc_flags; 	int err = 0; 	frame = get_sigframe(&ksig->ka, regs, sizeof(struct rt_sigframe), &fp);@@ -473,9 +473,11 @@ static int __setup_rt_frame(int sig, str 			return -EFAULT; 	}+	uc_flags = frame_uc_flags(regs);+ 	put_user_try { 		/* Create the ucontext.  */-		put_user_ex(frame_uc_flags(regs), &frame->uc.uc_flags);+		put_user_ex(uc_flags, &frame->uc.uc_flags); 		put_user_ex(0, &frame->uc.uc_link); 		save_altstack_ex(&frame->uc.uc_stack, regs->sp);",Technical
,
"Ah.. how about I feed objtool a text file with all these symbol names;and I have Makefile compose file that from fragments.Then only KASAN builds will have memset whitelisted, and any other buildwill still flag memset abuse.Now I only have to figure out how to make Makefile do something likethat :-)",Technical
,
"Reviewed-by: Andy Lutomirski <luto@kernel.org>Also, this stuff is pretty well covered by the x86 selftests, mostlybecause getting it right in the first place was way too subtle forcomfort.--Andy",Technical
,
"These two can be called only with CONFIG_KASAN_EXTRA=y whichwas removed very recently, so it should be safe to delete these functions.",Technical
,
"Turns out we only look for sibling calls in the original instructionstream, not in any alternatives; which in general seems like a fairenough assumption.",Technical
,
Ooh shiny. Clearly my tree still has them; what commit do I need to lookfor?,Technical
,
commit 7771bdbbfd3d6f204631b6fd9e1bbc30cd15918e,Technical
,
"And while I'm looking at memset_64.S, why are memset_erms andmemset_orig global functions? At the very least they should be local,and ideally not even functions.",Technical
,
"30be39d1e1dc (""kasan: remove use after scope bugs detection."")",Technical
,
"Instead of adding all those additional moving parts, I would much rathereither:a) have kasan call a special whitelisted version of memset (like hpa   suggested); orb) just don't use the objtool --uaccess flag for KASAN builds.--Josh",Technical
,
"I think the only benefit is that they would show up better on stacktraces, but that could also be solved by just making them local labelsinside memset.  Which is what I think they should be.The general rule is that ENDPROC is only used for callable functions, soyeah, I think the current setup isn't ideal, and also prevents objtoolfrom properly doing the AC analysis as you pointed out earlier.--Josh",Technical
,
"The problem went away. That is, the problematic part of KASAN just gotremoved in this merge window.Also; I just about had hpa's __memset_kasan implemented when I got thatemail.",Technical
,
"Boris wanted to use alternative_call_2, just like copy_user_generic().Which makes more sense to me still.",Technical
,
"This is an unstructured piece of code rather than a callable function,END would probably be more appropriate.  Or maybe it should just be alocal label (.Lcopy_user_handle_tail) because I don't think thealignment and ELF symbol size are even needed.--Josh",Technical
,
Shouldn't these be using SMAP-based alternatives like stac()/clac() do?--Josh,Technical
,
Also this you could get rid of the comment if there were anANNOTATE_AC_SAFE macro which does a similar thing.--Josh,Technical
,
Can you also say _why_?  I presume it's so the warning messages will besaner.--Josh,Technical
,
s/Hande/Handle/ in $SUBJECTAlso you can clarify why we need to track aliases?--Josh,Technical
,
s/relation/relocation--Josh,Technical
,
We should have done this a long time ago.  Thank you for this!--Josh,Technical
,
ENDPROC makes it STT_FUNC and gets us stricter AC tests.,Technical
,
"Right; because I'll introduce function attributes later on, so itbecomes important to know what function an instruction belongs to.I'll update the Changelog.",Technical
,
"Whoops :-)Function attributes (as per that previous patch) and: git grep ""alias""mm/kasan.",Technical
,
How so?  I would have thought the opposite.  Doesn't objtool only followa jump if its destination is to a non-function?  Otherwise it'sconsidered a sibling call.--Josh,Technical
,
"Ok, such details would be good in the patch description.--Josh",Technical
,
I like this approach.  I wonder if we can do something similar to getrid of the nasty fake jumps.--Josh,Technical
,
and we need to know who we're calling because...s/class/call/I would rather have 2-3 duplicated lines of code than complicating thecontrol flow like this.--Josh,Technical
,
"Style nit, no need for all those brackets and newlines.A short comment would be good here, something describing why a functionmight be added to the list.This won't work if the function name changes due to IPA optimizations.I assume these are all global functions so maybe it's fine?These gotos make my head spin.  Again I would much prefer a small amountof code duplication over this.Why is this a problem?Same question here.--Josh",Technical
,
"Needs more description -- namely, what and why.--Josh",Technical
,
Can you elaborate on why (in the patch description)?  Did this actuallyfind any occurrences?--Josh,Technical
,
"There is; but I'm thinking it might be too short?Those are gone.That is the main kasan_report function, and is for, as the comment says:kasan :-)for __asan_{load,store}NThese, are, again as the comment suggests, the out-of-line KASAN ABIcalls.The in-line KASAN ABIAlso, can I just say that {load,store}N vs {load,store}_n bugs thehell out of me?the logger functionKCOV ABIimplementationUBSAN ABIWith one or two exceptions, yep.I didn't think the code was that bad once you see the end result, butsure, I can try something else.'obvious' violation?STAC; .... RET; # an AC=1 leak.... CLAC; # spurious CLACIf we do the STAC we must also do the CLAC. If we don't do the STAC wemust also not do the CLAC.In general, validating NOPs isn't too interesting, so all NOP/INSNbinary alternatives could be forced on.I've actually changed this to depend on --uaccess, when set we force onFEATURE_SMAP, otherwise we force off.",Technical
,
"Nope, didn't find anything. Also, all DF users are in asm so I didn'treally expect any. Having it escape would probably result in fairlyinstant wreckage though.DF=1 results in things like rep mov going _backwards_.",Technical
,
This actually hard relies on those fake jumps. Or am I missing thepoint?,Technical
,
"I actually just meant a comment above uaccess_safe_builtin describingwhat the purpose of the list is and what the expectations are for thelisted functions.  i.e. these are functions which are allowed to becalled with the AC flag on, and they should not clear it unless they'resaving/restoring.Makes sense now, can you add that last sentence to the paragraph?Right, but it doesn't sound like there's any real benefit to addingextra logic.Ok.--Josh",Technical
,
"Ok, I wonder if we really need to add this then.--Josh",Technical
,
"I was just wondering out loud if we could somehow keep the same ""fakejump"" functionality, but do it in a cleaner way that doesn't requirecreating fake instructions.  I'll might give it a try.--Josh",Technical
,
"something like so then?--- a/tools/objtool/check.c+++ b/tools/objtool/check.c@@ -1888,6 +1888,23 @@ static inline const char *insn_dest_name 	return ""{dynamic}""; }+static int validate_call(struct instruction *insn, struct insn_state *state)+{+	if (state->uaccess && !func_uaccess_safe(insn->call_dest)) {+		WARN_FUNC(""call to %s() with UACCESS enabled"",+				insn->sec, insn->offset, insn_dest_name(insn));+		return 1;+	}++	if (state->df) {+		WARN_FUNC(""call to %s() with DF set"",+				insn->sec, insn->offset, insn_dest_name(insn));+		return 1;+	}++	return 0;+}+ /*  * Follow the branch starting at the given instruction, and recursively follow  * any other branches (jumps).  Meanwhile, track the frame pointer state at@@ -2036,25 +2053,9 @@ static int validate_branch(struct objtoo 		case INSN_CALL: 		case INSN_CALL_DYNAMIC:-do_call:-			if (state.uaccess && !func_uaccess_safe(insn->call_dest)) {-				WARN_FUNC(""call to %s() with UACCESS enabled"",-					  sec, insn->offset, insn_dest_name(insn));-				return 1;-			}--			if (state.df) {-				WARN_FUNC(""call to %s() with DF set"",-					  sec, insn->offset, insn_dest_name(insn));-				return 1;-			}--			if (insn->type == INSN_JUMP_UNCONDITIONAL ||-			    insn->type == INSN_JUMP_DYNAMIC)-				return 0;--			if (insn->type == INSN_JUMP_CONDITIONAL)-				break;+			ret = validate_call(insn, &state);+			if (ret)+				return ret; 			if (insn->type == INSN_CALL) { 				if (is_fentry_call(insn))@@ -2077,13 +2078,15 @@ static int validate_branch(struct objtoo 		case INSN_JUMP_CONDITIONAL: 		case INSN_JUMP_UNCONDITIONAL: 			if (func && !insn->jump_dest) {-do_sibling_call:+				/* sibling call */ 				if (has_modified_stack_frame(&state)) { 					WARN_FUNC(""sibling call from callable instruction with modified stack frame"", 							sec, insn->offset); 					return 1; 				}-				goto do_call;+				ret = validate_call(insn, &state);+				if (ret)+					return ret; 			} else if (insn->jump_dest && 				   (!func || !insn->jump_dest->func ||@@ -2104,8 +2107,17 @@ static int validate_branch(struct objtoo 			break; 		case INSN_JUMP_DYNAMIC:-			if (func && list_empty(&insn->alts))-				goto do_sibling_call;+			if (func && list_empty(&insn->alts)) {+				/* sibling call */+				if (has_modified_stack_frame(&state)) {+					WARN_FUNC(""sibling call from callable instruction with modified stack frame"",+							sec, insn->offset);+					return 1;+				}+				ret = validate_call(insn, &state);+				if (ret)+					return ret;+			} 			return 0;",Technical
,
"See patch 8. This really should be folded back in the previous patch,but it is easier to look at without all that mixed in.",Technical
,
"Well, Linus asked for it, and it was a fairly trivial add-on :-)",Technical
,
Can't you just have those same engineers look at perf data? This seemslike a very expensive and convoluted way of getting something.,Technical
,
How about we just rename the one annotation we have? I figured it was awaste of LoC to do yet another annotation that does the very same thing.,Technical
,
"Normally yes, but we don't do that for .fixup I think. And by settingSTT_FUNC we enable the 'redundant CLAC' warning, which is ignored for!STT_FUNC.",Technical
,
"I think ANNOTATE_IGNORE_ALTERNATIVE would hurt readability too.  Howabout just  #define ANNOTATE_UACCESS_SAFE ANNOTATE_NOSPEC_ALTERNATIVEor, make both ANNOTATE_UACCESS_SAFE and ANNOTATE_NOSPEC_ALTERNATIVEdefined to the same OBJTOOL_IGNORE_ALTERNATIVE macro.--Josh",Technical
,
"If it doesn't matter much either way, I'd rather err on the side of lesscode.  Your call though.--Josh",Technical
,
"Yeah, that looks a lot nicer to me.  Thanks.--Josh",Technical
,
"Commit-ID:  37686b1353cfc30e127cef811959cdbcd0495d98Gitweb:     https://git.kernel.org/tip/37686b1353cfc30e127cef811959cdbcd0495d98Author:     Josh Poimboeuf <jpoimboe@redhat.com>AuthorDate: Thu, 7 Mar 2019 11:48:02 -0600Committer:  Ingo Molnar <mingo@kernel.org>CommitDate: Wed, 3 Apr 2019 09:36:27 +0200tracing: Improve ""if"" macro code generationWith CONFIG_PROFILE_ALL_BRANCHES=y, the ""if"" macro converts theconditional to an array index.  This can cause GCC to create horriblecode.  When there are nested ifs, the generated code uses registervalues to encode branching decisions.Make it easier for GCC to optimize by keeping the conditional as aconditional rather than converting it to an integer.  This shrinks thegenerated code quite a bit, and also makes the code sane enough forobjtool to understand.Reported-by: Peter Zijlstra <peterz@infradead.org>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Cc: Borislav Petkov <bp@alien8.de>Cc: Linus Torvalds <torvalds@linux-foundation.org>Cc: Thomas Gleixner <tglx@linutronix.de>Cc: brgerst@gmail.comCc: catalin.marinas@arm.comCc: dvlasenk@redhat.comCc: dvyukov@google.comCc: hpa@zytor.comCc: james.morse@arm.comCc: julien.thierry@arm.comCc: luto@amacapital.netCc: luto@kernel.orgCc: rostedt@goodmis.orgCc: valentin.schneider@arm.comCc: will.deacon@arm.comLink: https://lkml.kernel.org/r/20190307174802.46fmpysxyo35hh43@trebleSigned-off-by: Ingo Molnar <mingo@kernel.org>--- include/linux/compiler.h | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)diff --git a/include/linux/compiler.h b/include/linux/compiler.hindex 445348facea9..d58aa0db05f9 100644--- a/include/linux/compiler.h+++ b/include/linux/compiler.h@@ -67,7 +67,7 @@ void ftrace_likely_update(struct ftrace_likely_data *f, int val, 				.line = __LINE__,			\ 			};						\ 		______r = !!(cond);					\-		______f.miss_hit[______r]++;					\+		______r ? ______f.miss_hit[1]++ : ______f.miss_hit[0]++;\ 		______r;						\ 	})) #endif /* CONFIG_PROFILE_ALL_BRANCHES */",Technical
,
"On Fri, 19 Apr 2019 12:08:37 +0200Ingo Molnar <mingo@kernel.org> wrote:I haven't tried the perf data. How well does it work with running overa 2 weeks to a month period? That's what I do yearly. Here's theresults of my last run:  http://rostedt.homelinux.com/branches/gandalf-branches-2019/brach_all-2019-02-05  http://rostedt.homelinux.com/branches/mammoth-branches-2019/branch_all-2019-01-02  http://rostedt.homelinux.com/branches/mammoth-branches-2019/branch_all-2019-01-03  http://rostedt.homelinux.com/branches/mammoth-branches-2019/branch_all-2019-01-17  http://rostedt.homelinux.com/branches/mammoth-branches-2019/branch_all-2019-02-05I have a cron job that runs nightly that copies the current state, andif the machine reboots, it starts a new file (which is why there'smultiple files for mammoth - it rebooted).I've never used it, so I have no idea if it is suitable or not.But is it a real burden? It's been in the kernel for over 10 yearswith very little issue. Only when we do something drastic does it showup, and it's usually a quick fix to get it working again.I believe Josh even told me that it found a bug in the objtool code, soit does still have benefit staying in the kernel even without peopleusing it for profiling.Note, I'm in the middle of writing a LWN article about learning thekernel from branch profiling and it would be a shame if it disappearsbefore I finish it.-- Steve",Technical
,
"arch/x86/kernel/signal.o: warning: objtool: do_signal()+0x384: call to frame_uc_flags.isra.0() with UACCESS enabled@@ -441,7 +441,7 @@ static int __setup_rt_frame(int sig, str 	return 0; } #else /* !CONFIG_X86_32 */-static unsigned long frame_uc_flags(struct pt_regs *regs)+static __always_inline unsigned long frame_uc_flags(struct pt_regs *regs) { 	unsigned long flags;",Technical
,
"They are, __ASM_{ST,CL}AC are the raw instructions ASM_{ST,CL}AC are thealternatives.",Technical
,
"HelloAfter thinking about this dt header I am not happy about having it.I am thinking of removing this file completely and doing some calculations in the driverfile for the impedance, averaging time and ramp times.I would still like to get comments on the rest of the code but in v2 the dt bindings header willgo away.Dan<snip>--------------------Dan Murphy",Technical
,
"Hi!I guess dt people will have some comments here. I'd expectramp-up-us = <1024> would be more natural.Ok, so we'll have lm3532::backlight. That is not too useful, as itdoes not tell userland what kaclight it is.main_display::backlight ?OTOH this one is not too important as backlight subsystem shouldhandle this.I guess best variant would be inputX::backlight here, but that mightbe tricky to implement.									Pavel--(english) http://www.livejournal.com/~pavelmachek(cesky, pictures) http://atrey.karlin.mff.cuni.cz/~pavel/picture/horses/blog.html",Technical
,
PavelThanks for the review.Actually ramp-up-us/ramp-down-us is more correct this is an error in this dt definitionand will be fixed in v2For Droid4 I am not particular to any specific label.And if the series in https://lkml.org/lkml/2018/11/7/144is ever implemented then the label may change as well.The driver forces the lm3532 string to be part of the label.This was a discussion a while back with Jacek when I submitted other drivers.Yeah because we don't know what input the keyboard would be on.Unless there are APIs to retrieve that info.  I have not looked at the inputframework in a while.Dan--------------------Dan Murphy,Technical
,
"Lets just make it ""platform::kbd_backlight"". *:kbd_backlight isalready used by quite a few drivers.									Pavel--(english) http://www.livejournal.com/~pavelmachek(cesky, pictures) http://atrey.karlin.mff.cuni.cz/~pavel/picture/horses/blog.html",Technical
,
PavelSounds fine to me.  I will update in v3 as I posted v2 with a lot of deltasDan--------------------Dan Murphy,Technical
,
"Hi Dan,Thank your for the patch.I have some comments below, please take a look.If control_bank was validated in lm3532_parse_node(), then you wouldn'thave to take into account this option here.Besides, you don't need this switch statement, but can easily calculatectrl_en_val:#define LM3532_GET_CTRL_BANK_EN_VAL(bank_id) BIT(bank_id)Ditto.Similarly here. use following macro:#define LM3532_GET_CTRL_BANK_BRT_REG (bank_id)BIT((LM3532_REG_CTRL_A_BRT + bank_id*2))mutex_destroy() is missing here.This should go in a separate patch, with DT bindings - see checkpatch.plcomplaint.--Best regards,Jacek Anaszewski",Technical
,
JacekThanks for the review.  I have pushed v2 with some code changes but those changes that weremade seem to be outside your comments.So I will implemnt these comments in v3.Ack.  Probably don't even need the macro for this.ctrl_en_val = BIT(led_data->control_bank);Ack  Same as aboveAck. Probably don't need a macro since it is only used once.brightness_reg = LM3532_REG_CTRL_A_BRT + led->control_bank * 2AckI have removed this in v2 of the next patchset.Dan--------------------Dan Murphy,Technical
,
"Dan,One more thing I forgot to mention before.[...]Let's have ""//"" comments here.--Best regards,Jacek Anaszewski",Technical
,
Awhile ago...commit dadf680de3c2eb4cba9840619991eda0cfe98778Author: Joe Perches <joe@perches.com>Date:   Tue Aug 2 14:04:33 2016 -0700    checkpatch: allow c99 style // comments    Sanitise the lines that contain c99 comments so that the error doesn't    get emitted.    Link: http://lkml.kernel.org/r/d4d22c34ad7bcc1bceb52f0742f76b7a6d585235.1468368420.git.joe@perches.com    Signed-off-by: Joe Perches <joe@perches.com>    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>,Technical
,
[]The general form uses a space after the //And much more recently:commit fdf13693d370653013eec3bc7f80a3f535001bf0Author: Joe Perches <joe@perches.com>Date:   Thu Mar 7 16:28:32 2019 -0800    checkpatch: verify SPDX comment style    Using SPDX commenting style // or /* is specified for various file types    in Documentation/process/license-rules.rst so add an appropriate test for    .[chsS] files because many proposed file additions and patches do not use    the correct style.,Technical
,
Thanks JoeI guess I was referring to this SPDX warningWARNING: Missing or malformed SPDX-License-Identifier tag in line 1#1: FILE: drivers/net/can/m_can/m_can.h:1:+//SPDX-License-Identifier: GPL-2.0--------------------Dan Murphy,Technical
,
JacekLike I said earlier in v2 this header went away.And checkpatch takes issue with // in headers.Unless they have removed that requirement.Dan--------------------Dan Murphy,Technical
,
iput while holding spinlock is not goodI don't understand this comment. get_quota_realm() unlock snap_rwsemno matter the 'retry' parameter is true or not/maybe we should  distinguish ‘realm->inode is null' from 'igrab fails',Technical
,
"""Yan, Zheng"" <ukernel@gmail.com> writes:Yep, that's definitely not a good idea.  And maybe this loop could evenrace with a lookup currently in progress and a new inode could be addedto the list after the cleanup.  I didn't verified this race could reallyoccur, because an easy fix is to simply move this loop intoceph_mdsc_destroy() where we don't really need the spinlock anymore.<snip>Right, maybe the parameter name and the comment are a bit misleading.get_quota_realm may need to do an inode lookup and then retry to get thequota realm.  If this lookup is required, it has to drop the rwsem.However, in ceph_quota_is_same_realm we need to lookup 2 quota realms""atomically"", i.e. with the rwsem held.  If get_quota_realm needs todrop it, it will do the MDS inode lookup anyway but instead of retryingto get the quota realm it will return -EAGAIN (because 'retry' will be'false').  This allows for ceph_quota_is_same_realm to restart theoperation itself, and retry to get both quota realms withoutget_quota_realm dropping the rwsem.Does it make sense?  I agree the design isn't great :-/I tried to describe this behavior in get_quota_realm comment, but it'sprobably not good enough.Sure, that makes sense.Cheers,--Luis",Technical
,
Can someone review this patch?,Technical
,
"Hi Nicolas,On Tue, Mar 12, 2019 at 10:37 AM Nicolas Saenz Julienne<nsaenzjulienne@suse.de> wrote:Patch looks good to me.Terry, did you have time to review it?Cheers,Benjamin",Technical
,
"On Mon, Mar 25, 2019 at 11:39 AM Benjamin Tissoires<benjamin.tissoires@redhat.com> wrote:Actually, the good thing of having a test suite, is that it raises bugs :)You are also missing the computation of the usage in hid_scan_main().This makes the autoloading of hid-multitouch fail, and thus the testsuite failing.Cheers,Benjamin",Technical
,
"Hi Benjamin, Thanks for the review!Ok, I'll look into it and send a follow-up.",Technical
,
"Hello Dan,Am 12.03.19 um 13:12 schrieb Dan Murphy:... snip ...What is m_can_version for the tcan4x5x?... snip ...Wolfgang.",Technical
,
WolfgangI believe it is Bosch M-CAN Revision 3.2.1.1--------------------Dan Murphy,Technical
,
"Hello Dan,in the previous email you said that the tcan4x5x uses:  Bosch M-CAN Revision 3.2.1.1This means ""cdev->version == 32"", hence it's using FIFOs...Am 12.03.19 um 13:12 schrieb Dan Murphy:I think this frees the skb twice!Also, the index depends on ""cdev->version""! If > 30, the last used indexshould be selected.What happens to the ""tx_skb"" if this funtions returns withNETDEV_TX_BUSY? Will it be freed?You stop the queue immediately, even if fifos are used. Is this by purpose?Wolfgang.",Technical
,
WolfgangIt appears so.  I will fix it up.OK I will need to look into that.I am missing the change I put in to free this.It must have been lost when rebasing the patch setI will add it back and fix this upGood catch.  I should let the work queue handle this.  I see that < 3.0 stops the queue immedidatelybut > 3.0 does not.I don't know what version of core the hi or mcp parts are using it looks to be 3.0.I believe thats where I pulled the stop from.I will remove it.--------------------Dan Murphy,Technical
,
"I'm sorry you're going to have to break this up into multiple patches.Probably one for each item on your list.regards,dan carpenter",Technical
,
"No problem. In a previous patch I had one for each item, but I thoughtit could be packed in a single one - and avoid '[PATCH n/m]'.Thanks.",Technical
,
"Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>Maxime--Maxime Ripard, BootlinEmbedded Linux and Kernel engineeringhttps://bootlin.com",Technical
,
"I'm not sure all that remaining is worth it to be honest. It adds alot of noise for no particular reason (and the same goes for renamingthe file itself).Maxime--Maxime Ripard, BootlinEmbedded Linux and Kernel engineeringhttps://bootlin.com",Technical
,
"Maybe keeping names is okay ""for historial reasons"".In fact I want to keep them.",Technical
,
"Hi Icenowy,Le mardi 12 mars 2019 à 23:22 +0800, Icenowy Zheng a écrit :Thanks for working on this, I was actually close to submitting similarpatches for V3 support!I just reviewed the definitions and found a mistakes about the LVDSfunction (that should be 0x3 instead of 0x2).Otherwise, things look good and match what I had came up with.Cheers,PaulLVDS should be function 0x3.Ditto about LVDS.Ditto about LVDS.Ditto about LVDS.Ditto about LVDS.Ditto about LVDS.Ditto about LVDS.Ditto about LVDS.Ditto about LVDS.Ditto about LVDS.--Paul Kocialkowski, BootlinEmbedded Linux and kernel engineeringhttps://bootlin.com",Technical
,
"Hi,Le mardi 12 mars 2019 à 23:45 +0800, Icenowy Zheng a écrit :My two cents about this: kernel development is plagued by the unabilityto rename and rework things as soon as backward compatibility isinvolved. I believe that renaming and reworking things is quite a goodthing to do when it leads to a situation that is easier to understandand makes more sense.In this case, I don't see any blockers that would prevent us from doingthis, so I am strongly in favor of it. I really don't see how increasednoise and ""historical reasons"" make up for better clarity.Cheers,Paul--Paul Kocialkowski, BootlinEmbedded Linux and kernel engineeringhttps://bootlin.com",Technical
,
"It simplifies the git history, for once, which has the side effect ofreducing conflicts too.A second one is: Do you prefer to review patches that have somesignificant value (like a new feature, a bugfix, a new SoC support,etc) or one that renames files and / or symbols?Maxime--Maxime Ripard, BootlinEmbedded Linux and Kernel engineeringhttps://bootlin.com",Technical
,
"Hi,Le mardi 12 mars 2019 à 23:22 +0800, Icenowy Zheng a écrit :Note that the V3 has a NMI controller at 1c000d0, that is required forhandling the AXP209 interrupts IIRQ. I have no idea whether it's alsothe case on the V3s/S3/S3L though but it would be good to know.Note that I can totally add support for it when adding support for myV3 device that uses the AXP209 this way.Also, could we get proper compatibles and config options for these newSoCs, since they are distinct from the V3S?Cheers,Paul--Paul Kocialkowski, BootlinEmbedded Linux and kernel engineeringhttps://bootlin.com",Technical
,
"It's not mentioned on the datasheet.If it's present, please send a patch.BTW all V3 series chip share the same die (sun8iw8).Thanks",Technical
,
"Hi,Indeed, it is not documented but the block is definitely there (and itshows up in Allwinner's kernel source too). I'll send a patch oncethese series is merged then!Right, so I think it's safe to assume that the controller is there onall of them then.Cheers,Paul--Paul Kocialkowski, BootlinEmbedded Linux and kernel engineeringhttps://bootlin.com",Technical
,
Reviewed-by: Rob Herring <robh@kernel.org>,Technical
,
Reviewed-by: Rob Herring <robh@kernel.org>,Technical
,
Reviewed-by: Rob Herring <robh@kernel.org>,Technical
,
Reviewed-by: Rob Herring <robh@kernel.org>,Technical
,
Seems like a bunch of duplication for just 2 differences in clocks.Can't you keep the definitions the same and just skip registering theclocks not present?Perhaps reword as 'Clocks only on V3',Technical
,
Reviewed-by: Rob Herring <robh@kernel.org>,Technical
,
Reviewed-by: Rob Herring <robh@kernel.org>,Technical
,
"I'd rather not, this can lead to access to registers that might not bethere when the CCF will read / write that clockMaxime--Maxime Ripard, BootlinEmbedded Linux and Kernel engineeringhttps://bootlin.com",Technical
,
"I see there is some review comments on this patch set so I am waitingfor v2.When we have something Maxime, Rob etc has ACKed, I suggest I mergethe pinctrl stuff into an immutable branch in the pinctrl tree so that it canbe pulled in to ARM SoC if need be (for DTS files to compile for example).Yours,Linus Walleij",Technical
,
"No need to put this in the changelog text at all.Please fix up and resend.thanks,greg k-h",Technical
,
"OK.	-ss",Technical
,
"Good day Yue,Good catch.If we do that we need to set 'err' to an error code here [1] and here[2].  Do you think you could fix this and roll another version of yourpatch?[1]. https://elixir.bootlin.com/linux/v5.1-rc1/source/tools/perf/util/cs-etm.c#L1967[2]. https://elixir.bootlin.com/linux/v5.1-rc1/source/tools/perf/util/cs-etm.c#L1981",Technical
,
"Next time please submit two patches, one for the PTR_ERR and another fornot throwing away the err = -E!INVAL and returning just -EINVAL, I'mdoing it this time. - Arnaldo--- Arnaldo",Technical
,
"On Mon, 18 Mar 2019 at 11:15, Arnaldo Carvalho de Melo<arnaldo.melo@gmail.com> wrote:Please hold off on that - I've asked for other modifications to bedone on this patch.Mathieu",Technical
,
"Do you really think that it is necessary to hold? The fixes are trivialand I already have them split and applied, see them below, I thinkwhatever other changes can be done in further patches, no?- Arnaldo",Technical
,
"Proceeding with the patches below would created two new bugs, hence asking Yuefor modifications.Mathieu",Technical
,
"Sorry for late, then I can send a new patch to fix the two new bugs.",Technical
,
"Em Tue, Mar 19, 2019 at 08:55:25AM -0600, Mathieu Poirier escreveu:Ok, I'll take your word on it then, dropping the patches.- Arnaldo--- Arnaldo",Technical
,
"On Sat, 16 Mar 2019 12:07:32 -0300Marcelo Schmitt <marcelo.schmitt1@gmail.com> wrote:Some stray whitespace in here. I cleaned it up.Thanks,Jonathan",Technical
,
"Am Montag, 18. Mrz 2019, 00:09:09 CET schrieb Colin King:commit bf4f804738544a95b8bc8d6a7e2629c3fc0240ddAuthor: jdike <jdike>Date:   Sat Dec 9 22:52:44 2000 +0000    hostfs now mostly works.  Almost all of the common operations are now    implemented, the main exceptions being mknod and executing files from    a hostfs filesystem.Enough archaeology for today. :-)Thanks,//richard",Technical
,
Nice. How do you find these ancient git commits?,Technical
,
"Hi,Colin is obvously right with that.But my guess is that the error occured because thepattern (from, to) is brocken here. AlsoMaybe the maintainer can fix that.just my 2 cents,re, whAm 18.03.2019 00:09, schrieb Colin King:",Technical
,
"Am Montag, 18. Mrz 2019, 09:41:28 CET schrieb Colin Ian King:This commit is from the old UML cvs tree.I did a import to git some time ago and pushed it to:https://git.kernel.org/pub/scm/linux/kernel/git/rw/uml-history.git/For classic pre-git stuff, check:https://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git/Thanks,//richard",Technical
,
"Hello,[I put Thierry into To: because some remaining questions depend on hisviews]The situation here is as follows: The actual period length calculatesas:	period_length = (0x10000 << scale) / rateConsider a clk rate of 600 MHz, then the driver maps ""requested period""to ""actual period"" as follows:	if requested_period <= 218453 ns:		// scale = 0		actual_period = 109226 ns	else if requested_period <= 436906 ns:		// scale = 1		actual_period = 218452 ns	else if requested_period <= 873812 ns:		// scale = 2		actual_period = 436904 ns	...	else if requested_period <= 3579139413 ns:		// scale = 14		actual_period = 1789569707 ns	else:		//scale = 15		actual_period = 3579139413 nsThere is an obvious rounding issue: If 218452 ns are requested, weshould end in the scale = 1 case for sure. (Similar issues exist for theother cases.)And then there are cases that are not that clear: What if 218000 ns arerequested? Where should the line be drawn? Thierry?And what about long periods? The longest actually supported periodlength is around 3.5 seconds. What if a consumer requests 18 seconds?Where should the line be drawn when the driver is supposed to return-EINVAL (or -ERANGE)? Thierry?Starting with this write the new period length might be active with theprevious duty cycle. Is this worth a comment? I think the window wherethis can actually happen should be made as small as possible, so itwould be great to first calculate both register values and then writethem in two consecutive writels.What about rounding here? I'd say use ""round closest"" instead of ""rounddown"".If the PWM was configured for { .period = 1000000, .duty_cycle =1000000, .enabled = false, ... }, .get_state still returns .duty_cycle =0. Is this acceptable?Space after : please. Also applies to the other error strings.I think it would be more common to call the struct pwm_device pointer""pwm"" and the struct pwm_sifive_ddata pointer ""ddata"".""dev"" is usually a pointer to a struct device. The other functions needthe same adaption of course.Here is another rounding question. Given that the period length can onlybe modified by factors of two there are cases where the real period isoff by a factor of at least 1.4 which has an effect on the duty cycle.Consider again an input clk rate of 600 MHz, and:	.duty_cycle = 109226 [ns]	.period = 152916 [ns]We either have to go for real period = 109226 ns (as is currentlyimplemented) or with 218452 ns. Which one should be chosen I alreadyasked above. Here the question is (probably depending on the formerquestion) how should the actual duty_cycle be calculated?This goto is a noop and so can be dropped.Is it a problem when the notifier is called before pwmchip_add wascalled? Out of interest: Is a real problem addressed here? I.e.: Doesthe input clock actually change in practise? Also note thatpwm_sifive_clock_notifier only adapts the period but not the duty cycle(any more).Given that a clk rate change affects the output, I wonder if the changeshould be declined if the pwm is running.If the bootloader setup a display with a backlight driven by a PWM itwould be ideal to not modify the already running hardware here.Here is another consumer API function call.I think you're leaking a clk_enable here. The probe function does oneunconditionally that is never undone.Best regardsUwe--Pengutronix e.K.                           | Uwe Kleine-Knig            |Industrial Linux Solutions                 | http://www.pengutronix.de/  |",Technical
,
"On Tue, Mar 19, 2019 at 3:16 AM Uwe Kleine-König<u.kleine-koenig@pengutronix.de> wrote:The comment for this scenario has already been mentioned under thelimitation on top of this driver.Anyway, I will try to implement your suggestion of consecutive writesSureOk. Will change thatSureOk, will drop this initialization.Will avoid using it.Will use clk_disable_unprepare instead of clk_unprepare",Technical
,
"Yeah, the comment at the top is for general information about theshortcomings. The comment here would be to say: The problem occurs *here*.Best regardsUwe--Pengutronix e.K.                           | Uwe Kleine-Knig            |Industrial Linux Solutions                 | http://www.pengutronix.de/  |",Technical
,
Are you sure this can happen?I don't think this is possible if client->dev.of_node is non-NULL.The 'if (client->dev.of_node)' above should see to that.--Lee Jones [æŽç¼æ–¯]Linaro Services Technical LeadLinaro.org â”‚ Open source software for ARM SoCsFollow Linaro: Facebook | Twitter | Blog,Technical
,
"We would not even enter this path without matching compatible, so Ithink a check here is not really necessary.thanks,srini",Technical
,
"I'd suggest using the username ""fsgqa2"" so that other tests that wantto use a second username can do so using a more logically name username.       	 		     	- Ted",Technical
,
"     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^This isn't a ""test names with digits"" test, but ""test names beginingwith digits"" test.  Changing the username to not begin with digitsinvalidates the entire purpose of the test which is to ensure thatxfs_quota can differentiate between UIDs and names beginning withnumbers....So from that perspective, NAK.IF there are distros not allowing usernames to start with digits,then this test needs a _requires check and to _notrun on thosesystems.Cheers,Dave.--Dave Chinnerdavid@fromorbit.com",Technical
,
"These should notrun automatically if you don't have an external logdevice configured. Every test should either work with an externallogdev or explicitly notrun them, so I'm not sure what you're tryingto acheive here....This change also looks wrong because:xfs/044  [not run] This test requires a valid $SCRATCH_LOGDEVxfs/045 1s ... 1sxfs/044 is the external logdev test, and xfs/045 is aduplicate uuid mount test that has nothign to do with externallog devices.And, FWIW, we already have a ""log"" group to indicate tests thatexercise the log, and that mostly includes all the tests that useexternal logs. It would be better to tag all the tests that exercisethe log with ""log"" rather than create some new group that doesn'treally provide any added benefit....Cheers,Dave.--Dave Chinnerdavid@fromorbit.com",Technical
,
"NAK. this should be automatically detected by the tests and they_not_run when support is not available.Cheers,Dave.--Dave Chinnerdavid@fromorbit.com",Technical
,
"This already _not_runs on new systems. we do not want to be addingone-off group descriptors to avoid tests like this - the teststhemselves already detect whether they should run or not.xfs/096 2s ... [not run] Requires older mkfs without strict input checks: the last supported version of xfsprogs is 4.5.Why are you trying to add groups to define tests that not_runcorrectly on systems they aren't supported on?Cheers,Dave.--Dave Chinnerdavid@fromorbit.com",Technical
,
"The way I'm splitting up tests is one first run with a basic xfs sectionon a configuration file, with no external log, which pretty much runs alltests but excludes all which require external or funky configurations.A secondary pass then goes through these extra groups and then runs testsonly for the previously excluded groups but with their own respectivesection. So for instance in this case I have:[xfs]....[logdev_xfs]...Automatic detection if the requirements are met is fine, but this doesn'tlet me easily use say:	./check -s logdev_xfs -g logdevI see...So for my case would one better goal be to just run check without the externalone and one with the external log?  ./check -s xfs -g log  ./check -s logdev_xfs -g log  Luis",Technical
,
"Which seems to me like a misguided attempt to optimise testruntimes. i.e. this doesn't provide test coverage of external logbehaviour in all the cases that need to be tested.Data integrity code paths are affected by having an external log. IOordering changes with external logs, which can expose update/crashrecovery problems. external logs can expose data IO race conditionsthat are masked by interleaved log IO. etc, etc, etc.You can't just run an internal log test then add couple of extraexternal log tests and say ""external logs work fine"".You can do that if we ignore the fact that a large number of testsneed to be run on both internal and external log devices to coverthe differences in behaviour between them.See above. Your test coverage assumptions are wrong, so what you aretrying to do really doesn't tell you whether external logs workcorrectly or not. It's worse that not testing external logs at all,because it gives the false impression that they have beenexhaustively tested and work just fine when that really isn't thecase.Cheers,Dave.--Dave Chinnerdavid@fromorbit.com",Technical
,
"                     ^^^^^^ ndbm.h?This looks fine to me.The only system I have by hand that have both <gdbm.h> and <ndbm.h> butnot any <gdbm/[gn]dbm.h> is openSUSE Tumbleweed. Without this patch,dbtest was not built on openSUSE, and was built successfully with thispatch applied. And dbtest is still built on RHEL6/7 and Fedora.BTW, I'll queue patch 3 and this patch for next fstests release, whileother patches seem not necessary, I agreed with Dave that groups are notfor excluding tests, the required tools and environments should bedetected by tests and _notrun if not met. (The README change looks fine,but it doesn't apply due to the ""fsgqa-381"" change, so I drop it too fornow.)Thanks,Eryu",Technical
,
"Makes sense, thanks.  Luis",Technical
,
"Indeed, openSUSE and SLE releases.Yeap.Feel free to modify the commit log accordingly then. Curious, what packagesdoes Fedora/ RHEL6/7 use for the requirement here?We just have one:$ rpm -ql gdbm-devel-1.12-1.282.x86_64/usr/bin/gdbm_dump/usr/bin/gdbm_load/usr/bin/gdbmtool/usr/include/dbm.h/usr/include/gdbm.h/usr/include/ndbm.h/usr/lib64/libgdbm.a/usr/lib64/libgdbm.so/usr/lib64/libgdbm_compat.a/usr/lib64/libgdbm_compat.so/usr/lib64/libndbm.a/usr/lib64/libndbm.so/usr/share/info/gdbm.info.gz/usr/share/man/man1/gdbm_dump.1.gz/usr/share/man/man1/gdbm_load.1.gz/usr/share/man/man1/gdbmtool.1.gz/usr/share/man/man3/gdbm.3.gzI think patch 2 is fine too.Yeah makes sense now. I think we should also document when addinga group makes sense as well.Feel free to modify it, its not a big deal.  Luis",Technical
,
"gdbm-devel too, but it has gdbm/[gn]dbm.h pointing to ../[gn]dbm.h, sothere's no such problem and dbtest is building normally.# rpm -ql gdbm-devel/usr/include/dbm.h/usr/include/gdbm/usr/include/gdbm.h/usr/include/gdbm/dbm.h/usr/include/gdbm/gdbm.h/usr/include/gdbm/ndbm.h/usr/include/ndbm.h/usr/lib64/libgdbm.so/usr/lib64/libgdbm_compat.so/usr/share/info/gdbm.info.gz/usr/share/man/man3/gdbm.3.gzOK, I'll modify on commit, thanks!Thanks,Eryu",Technical
,
"Hi guys -This change breaks on older releases like SLES 11 where both <ndbm.h>and <gdbm.h> define datum, so we get build failures.  The failure isnew, but not because it used to pass and now doesn't.  It's apparentlynever built on SLES releases since we ship /usr/include/ndbm.h and thenwe notrun the test that uses.  Now that we're looking for gdbm.h andfind it, we attempt to build src/dbtest and fail.This fix isn't the right solution.  The problem is that we have a couplelayers of old cruft that needs to be cleaned out.1) As Luis notes, nothing sets HAVE_GDBM_H.  The thing is that there isno version of gdbm.h that exports the NDBM interface.  Further, lookingat the git history, nothing has ever set HAVE_GDBM_H.  It was dead codewhen it was committed initially as best I can tell.2) openSUSE Tumbleweed doesn't need <gdbm.h> at all.  It needs <ndbm.h>and this fix works because Luis added it to the HAVE_GDBM_H stanza.3) AC_PACKAGE_WANT_NDBM used to check for <ndbm.h> but it was a checkfor IRIX and the caller was removed ages ago.  It wouldn't matter if itwere called anyway since libndbm is an IRIX library.  Linux, IIRC, hasnever shipped a libndbm.I'll post a few patches following this to clean it up and get it workingon SLES11.-Jeff--Jeff MahoneySUSE Labs",Technical
